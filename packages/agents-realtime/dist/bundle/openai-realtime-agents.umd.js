(function(M,z){typeof exports=="object"&&typeof module<"u"?z(exports):typeof define=="function"&&define.amd?define(["exports"],z):(M=typeof globalThis<"u"?globalThis:M||self,z(M.OpenAIAgentsRealtime={}))})(this,(function(M){"use strict";var Id=Object.defineProperty;var ni=M=>{throw TypeError(M)};var Td=(M,z,te)=>z in M?Id(M,z,{enumerable:!0,configurable:!0,writable:!0,value:te}):M[z]=te;var _=(M,z,te)=>Td(M,typeof z!="symbol"?z+"":z,te),Gr=(M,z,te)=>z.has(M)||ni("Cannot "+te);var o=(M,z,te)=>(Gr(M,z,"read from private field"),te?te.call(M):z.get(M)),I=(M,z,te)=>z.has(M)?ni("Cannot add the same private member more than once"):z instanceof WeakSet?z.add(M):z.set(M,te),v=(M,z,te,Cn)=>(Gr(M,z,"write to private field"),Cn?Cn.call(M,te):z.set(M,te),te),L=(M,z,te)=>(Gr(M,z,"access private method"),te);var Rt,ht,ge,Dt,ce,zr,Vr,Wr,ri,Hr,an,We,_e,Le,Pt,Mt,on,mt,un,cn,jt,dn,ln,$t,de,Ze,He,Ke,Ft,pe,Kr,Yr,zt,ye,pn,fn,hn,mn,gt,Ye,Xe,_t,gn,Lt,Ue,ue,yt,nr,si,vt,_n,fe,yn,vn,H,wn,wt,bn,Qe,et,ie,xn,qe,bt,xt,Zt,Sn,rr,ai,$,D,Ut,P,qt,Jt,In,Y,Bt,Gt,Pe,Tn,St,kn,An,K,sr,ar,ii,ir,oi,Xr,ui,Qr;const z={version:"0.1.11"};async function te(n){try{return[null,await n()]}catch(e){return[e,null]}}function Cn(n,e){const t={...n};return Object.defineProperties(t,{$brand:{value:"auto-parseable-response-format",enumerable:!1},$parseRaw:{value:e,enumerable:!1}}),t}const ci=Symbol("Let zodToJsonSchema decide on which parser to use"),es={name:void 0,$refStrategy:"root",effectStrategy:"input",pipeStrategy:"all",dateStrategy:"format:date-time",mapStrategy:"entries",nullableStrategy:"from-target",removeAdditionalStrategy:"passthrough",definitionPath:"definitions",target:"jsonSchema7",strictUnions:!1,errorMessages:!1,markdownDescription:!1,patternStrategy:"escape",applyRegexFlags:!1,emailStrategy:"format:email",base64Strategy:"contentEncoding:base64",nameStrategy:"ref"},di=n=>typeof n=="string"?{...es,basePath:["#"],definitions:{},name:n}:{...es,basePath:["#"],definitions:{},...n},or=n=>"_def"in n?n._def:n;function li(n){if(!n)return!0;for(const e in n)return!1;return!0}const pi=n=>{const e=di(n),t=e.name!==void 0?[...e.basePath,e.definitionPath,e.name]:e.basePath;return{...e,currentPath:t,propertyPath:void 0,seenRefs:new Set,seen:new Map(Object.entries(e.definitions).map(([r,s])=>[or(s),{def:or(s),path:[...e.basePath,e.definitionPath,r],jsonSchema:void 0}]))}};function ts(n,e,t,r){r!=null&&r.errorMessages&&t&&(n.errorMessage={...n.errorMessage,[e]:t})}function W(n,e,t,r,s){n[e]=t,ts(n,e,r,s)}var J;(function(n){n.assertEqual=s=>{};function e(s){}n.assertIs=e;function t(s){throw new Error}n.assertNever=t,n.arrayToEnum=s=>{const a={};for(const i of s)a[i]=i;return a},n.getValidEnumValues=s=>{const a=n.objectKeys(s).filter(u=>typeof s[s[u]]!="number"),i={};for(const u of a)i[u]=s[u];return n.objectValues(i)},n.objectValues=s=>n.objectKeys(s).map(function(a){return s[a]}),n.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{const a=[];for(const i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},n.find=(s,a)=>{for(const i of s)if(a(i))return i},n.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&Number.isFinite(s)&&Math.floor(s)===s;function r(s,a=" | "){return s.map(i=>typeof i=="string"?`'${i}'`:i).join(a)}n.joinValues=r,n.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(J||(J={}));var ns;(function(n){n.mergeShapes=(e,t)=>({...e,...t})})(ns||(ns={}));const k=J.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),Je=n=>{switch(typeof n){case"undefined":return k.undefined;case"string":return k.string;case"number":return Number.isNaN(n)?k.nan:k.number;case"boolean":return k.boolean;case"function":return k.function;case"bigint":return k.bigint;case"symbol":return k.symbol;case"object":return Array.isArray(n)?k.array:n===null?k.null:n.then&&typeof n.then=="function"&&n.catch&&typeof n.catch=="function"?k.promise:typeof Map<"u"&&n instanceof Map?k.map:typeof Set<"u"&&n instanceof Set?k.set:typeof Date<"u"&&n instanceof Date?k.date:k.object;default:return k.unknown}},x=J.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);class Me extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}format(e){const t=e||function(a){return a.message},r={_errors:[]},s=a=>{for(const i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)r._errors.push(t(i));else{let u=r,l=0;for(;l<i.path.length;){const c=i.path[l];l===i.path.length-1?(u[c]=u[c]||{_errors:[]},u[c]._errors.push(t(i))):u[c]=u[c]||{_errors:[]},u=u[c],l++}}};return s(this),r}static assert(e){if(!(e instanceof Me))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,J.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},r=[];for(const s of this.issues)s.path.length>0?(t[s.path[0]]=t[s.path[0]]||[],t[s.path[0]].push(e(s))):r.push(e(s));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}}Me.create=n=>new Me(n);const ur=(n,e)=>{let t;switch(n.code){case x.invalid_type:n.received===k.undefined?t="Required":t=`Expected ${n.expected}, received ${n.received}`;break;case x.invalid_literal:t=`Invalid literal value, expected ${JSON.stringify(n.expected,J.jsonStringifyReplacer)}`;break;case x.unrecognized_keys:t=`Unrecognized key(s) in object: ${J.joinValues(n.keys,", ")}`;break;case x.invalid_union:t="Invalid input";break;case x.invalid_union_discriminator:t=`Invalid discriminator value. Expected ${J.joinValues(n.options)}`;break;case x.invalid_enum_value:t=`Invalid enum value. Expected ${J.joinValues(n.options)}, received '${n.received}'`;break;case x.invalid_arguments:t="Invalid function arguments";break;case x.invalid_return_type:t="Invalid function return type";break;case x.invalid_date:t="Invalid date";break;case x.invalid_string:typeof n.validation=="object"?"includes"in n.validation?(t=`Invalid input: must include "${n.validation.includes}"`,typeof n.validation.position=="number"&&(t=`${t} at one or more positions greater than or equal to ${n.validation.position}`)):"startsWith"in n.validation?t=`Invalid input: must start with "${n.validation.startsWith}"`:"endsWith"in n.validation?t=`Invalid input: must end with "${n.validation.endsWith}"`:J.assertNever(n.validation):n.validation!=="regex"?t=`Invalid ${n.validation}`:t="Invalid";break;case x.too_small:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at least":"more than"} ${n.minimum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at least":"over"} ${n.minimum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${n.minimum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(n.minimum))}`:t="Invalid input";break;case x.too_big:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at most":"less than"} ${n.maximum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at most":"under"} ${n.maximum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="bigint"?t=`BigInt must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly":n.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(n.maximum))}`:t="Invalid input";break;case x.custom:t="Invalid input";break;case x.invalid_intersection_types:t="Intersection results could not be merged";break;case x.not_multiple_of:t=`Number must be a multiple of ${n.multipleOf}`;break;case x.not_finite:t="Number must be finite";break;default:t=e.defaultError,J.assertNever(n)}return{message:t}};let fi=ur;function hi(){return fi}const mi=n=>{const{data:e,path:t,errorMaps:r,issueData:s}=n,a=[...t,...s.path||[]],i={...s,path:a};if(s.message!==void 0)return{...s,path:a,message:s.message};let u="";const l=r.filter(c=>!!c).slice().reverse();for(const c of l)u=c(i,{data:e,defaultError:u}).message;return{...s,path:a,message:u}};function T(n,e){const t=hi(),r=mi({issueData:e,data:n.data,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,t,t===ur?void 0:ur].filter(s=>!!s)});n.common.issues.push(r)}class le{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,t){const r=[];for(const s of t){if(s.status==="aborted")return N;s.status==="dirty"&&e.dirty(),r.push(s.value)}return{status:e.value,value:r}}static async mergeObjectAsync(e,t){const r=[];for(const s of t){const a=await s.key,i=await s.value;r.push({key:a,value:i})}return le.mergeObjectSync(e,r)}static mergeObjectSync(e,t){const r={};for(const s of t){const{key:a,value:i}=s;if(a.status==="aborted"||i.status==="aborted")return N;a.status==="dirty"&&e.dirty(),i.status==="dirty"&&e.dirty(),a.value!=="__proto__"&&(typeof i.value<"u"||s.alwaysSet)&&(r[a.value]=i.value)}return{status:e.value,value:r}}}const N=Object.freeze({status:"aborted"}),Vt=n=>({status:"dirty",value:n}),we=n=>({status:"valid",value:n}),rs=n=>n.status==="aborted",ss=n=>n.status==="dirty",It=n=>n.status==="valid",En=n=>typeof Promise<"u"&&n instanceof Promise;var C;(function(n){n.errToObj=e=>typeof e=="string"?{message:e}:e||{},n.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(C||(C={}));class Ee{constructor(e,t,r,s){this._cachedPath=[],this.parent=e,this.data=t,this._path=r,this._key=s}get path(){return this._cachedPath.length||(Array.isArray(this._key)?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const as=(n,e)=>{if(It(e))return{success:!0,data:e.value};if(!n.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const t=new Me(n.common.issues);return this._error=t,this._error}}};function j(n){if(!n)return{};const{errorMap:e,invalid_type_error:t,required_error:r,description:s}=n;if(e&&(t||r))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:s}:{errorMap:(i,u)=>{const{message:l}=n;return i.code==="invalid_enum_value"?{message:l??u.defaultError}:typeof u.data>"u"?{message:l??r??u.defaultError}:i.code!=="invalid_type"?{message:u.defaultError}:{message:l??t??u.defaultError}},description:s}}class Z{get description(){return this._def.description}_getType(e){return Je(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:Je(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new le,ctx:{common:e.parent.common,data:e.data,parsedType:Je(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if(En(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const r=this.safeParse(e,t);if(r.success)return r.data;throw r.error}safeParse(e,t){const r={common:{issues:[],async:(t==null?void 0:t.async)??!1,contextualErrorMap:t==null?void 0:t.errorMap},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Je(e)},s=this._parseSync({data:e,path:r.path,parent:r});return as(r,s)}"~validate"(e){var r,s;const t={common:{issues:[],async:!!this["~standard"].async},path:[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Je(e)};if(!this["~standard"].async)try{const a=this._parseSync({data:e,path:[],parent:t});return It(a)?{value:a.value}:{issues:t.common.issues}}catch(a){(s=(r=a==null?void 0:a.message)==null?void 0:r.toLowerCase())!=null&&s.includes("encountered")&&(this["~standard"].async=!0),t.common={issues:[],async:!0}}return this._parseAsync({data:e,path:[],parent:t}).then(a=>It(a)?{value:a.value}:{issues:t.common.issues})}async parseAsync(e,t){const r=await this.safeParseAsync(e,t);if(r.success)return r.data;throw r.error}async safeParseAsync(e,t){const r={common:{issues:[],contextualErrorMap:t==null?void 0:t.errorMap,async:!0},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Je(e)},s=this._parse({data:e,path:r.path,parent:r}),a=await(En(s)?s:Promise.resolve(s));return as(r,a)}refine(e,t){const r=s=>typeof t=="string"||typeof t>"u"?{message:t}:typeof t=="function"?t(s):t;return this._refinement((s,a)=>{const i=e(s),u=()=>a.addIssue({code:x.custom,...r(s)});return typeof Promise<"u"&&i instanceof Promise?i.then(l=>l?!0:(u(),!1)):i?!0:(u(),!1)})}refinement(e,t){return this._refinement((r,s)=>e(r)?!0:(s.addIssue(typeof t=="function"?t(r,s):t),!1))}_refinement(e){return new rt({schema:this,typeName:S.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this),this["~standard"]={version:1,vendor:"zod",validate:t=>this["~validate"](t)}}optional(){return Fe.create(this,this._def)}nullable(){return st.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return Oe.create(this)}promise(){return jn.create(this,this._def)}or(e){return Rn.create([this,e],this._def)}and(e){return Nn.create(this,e,this._def)}transform(e){return new rt({...j(this._def),schema:this,typeName:S.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t=typeof e=="function"?e:()=>e;return new $n({...j(this._def),innerType:this,defaultValue:t,typeName:S.ZodDefault})}brand(){return new hs({typeName:S.ZodBranded,type:this,...j(this._def)})}catch(e){const t=typeof e=="function"?e:()=>e;return new Fn({...j(this._def),innerType:this,catchValue:t,typeName:S.ZodCatch})}describe(e){const t=this.constructor;return new t({...this._def,description:e})}pipe(e){return _r.create(this,e)}readonly(){return Ln.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const gi=/^c[^\s-]{8,}$/i,_i=/^[0-9a-z]+$/,yi=/^[0-9A-HJKMNP-TV-Z]{26}$/i,vi=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,wi=/^[a-z0-9_-]{21}$/i,bi=/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,xi=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,Si=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,Ii="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let cr;const Ti=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,ki=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,Ai=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,Ci=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,Ei=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,Oi=/^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,is="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",Ri=new RegExp(`^${is}$`);function os(n){let e="[0-5]\\d";n.precision?e=`${e}\\.\\d{${n.precision}}`:n.precision==null&&(e=`${e}(\\.\\d+)?`);const t=n.precision?"+":"?";return`([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`}function Ni(n){return new RegExp(`^${os(n)}$`)}function Di(n){let e=`${is}T${os(n)}`;const t=[];return t.push(n.local?"Z?":"Z"),n.offset&&t.push("([+-]\\d{2}:?\\d{2})"),e=`${e}(${t.join("|")})`,new RegExp(`^${e}$`)}function Pi(n,e){return!!((e==="v4"||!e)&&Ti.test(n)||(e==="v6"||!e)&&Ai.test(n))}function Mi(n,e){if(!bi.test(n))return!1;try{const[t]=n.split("."),r=t.replace(/-/g,"+").replace(/_/g,"/").padEnd(t.length+(4-t.length%4)%4,"="),s=JSON.parse(atob(r));return!(typeof s!="object"||s===null||"typ"in s&&(s==null?void 0:s.typ)!=="JWT"||!s.alg||e&&s.alg!==e)}catch{return!1}}function ji(n,e){return!!((e==="v4"||!e)&&ki.test(n)||(e==="v6"||!e)&&Ci.test(n))}class je extends Z{_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==k.string){const a=this._getOrReturnCtx(e);return T(a,{code:x.invalid_type,expected:k.string,received:a.parsedType}),N}const r=new le;let s;for(const a of this._def.checks)if(a.kind==="min")e.data.length<a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:x.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="max")e.data.length>a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:x.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="length"){const i=e.data.length>a.value,u=e.data.length<a.value;(i||u)&&(s=this._getOrReturnCtx(e,s),i?T(s,{code:x.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}):u&&T(s,{code:x.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}),r.dirty())}else if(a.kind==="email")Si.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"email",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="emoji")cr||(cr=new RegExp(Ii,"u")),cr.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"emoji",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="uuid")vi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"uuid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="nanoid")wi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"nanoid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid")gi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"cuid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid2")_i.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"cuid2",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="ulid")yi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"ulid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="url")try{new URL(e.data)}catch{s=this._getOrReturnCtx(e,s),T(s,{validation:"url",code:x.invalid_string,message:a.message}),r.dirty()}else a.kind==="regex"?(a.regex.lastIndex=0,a.regex.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"regex",code:x.invalid_string,message:a.message}),r.dirty())):a.kind==="trim"?e.data=e.data.trim():a.kind==="includes"?e.data.includes(a.value,a.position)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:{includes:a.value,position:a.position},message:a.message}),r.dirty()):a.kind==="toLowerCase"?e.data=e.data.toLowerCase():a.kind==="toUpperCase"?e.data=e.data.toUpperCase():a.kind==="startsWith"?e.data.startsWith(a.value)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:{startsWith:a.value},message:a.message}),r.dirty()):a.kind==="endsWith"?e.data.endsWith(a.value)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:{endsWith:a.value},message:a.message}),r.dirty()):a.kind==="datetime"?Di(a).test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:"datetime",message:a.message}),r.dirty()):a.kind==="date"?Ri.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:"date",message:a.message}),r.dirty()):a.kind==="time"?Ni(a).test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:"time",message:a.message}),r.dirty()):a.kind==="duration"?xi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"duration",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="ip"?Pi(e.data,a.version)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"ip",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="jwt"?Mi(e.data,a.alg)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"jwt",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="cidr"?ji(e.data,a.version)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"cidr",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="base64"?Ei.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"base64",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="base64url"?Oi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"base64url",code:x.invalid_string,message:a.message}),r.dirty()):J.assertNever(a);return{status:r.value,value:e.data}}_regex(e,t,r){return this.refinement(s=>e.test(s),{validation:t,code:x.invalid_string,...C.errToObj(r)})}_addCheck(e){return new je({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...C.errToObj(e)})}url(e){return this._addCheck({kind:"url",...C.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...C.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...C.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...C.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...C.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...C.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...C.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...C.errToObj(e)})}base64url(e){return this._addCheck({kind:"base64url",...C.errToObj(e)})}jwt(e){return this._addCheck({kind:"jwt",...C.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...C.errToObj(e)})}cidr(e){return this._addCheck({kind:"cidr",...C.errToObj(e)})}datetime(e){return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,offset:(e==null?void 0:e.offset)??!1,local:(e==null?void 0:e.local)??!1,...C.errToObj(e==null?void 0:e.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return typeof e=="string"?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,...C.errToObj(e==null?void 0:e.message)})}duration(e){return this._addCheck({kind:"duration",...C.errToObj(e)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...C.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:t==null?void 0:t.position,...C.errToObj(t==null?void 0:t.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...C.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...C.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...C.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...C.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...C.errToObj(t)})}nonempty(e){return this.min(1,C.errToObj(e))}trim(){return new je({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new je({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new je({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isDate(){return!!this._def.checks.find(e=>e.kind==="date")}get isTime(){return!!this._def.checks.find(e=>e.kind==="time")}get isDuration(){return!!this._def.checks.find(e=>e.kind==="duration")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isNANOID(){return!!this._def.checks.find(e=>e.kind==="nanoid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get isCIDR(){return!!this._def.checks.find(e=>e.kind==="cidr")}get isBase64(){return!!this._def.checks.find(e=>e.kind==="base64")}get isBase64url(){return!!this._def.checks.find(e=>e.kind==="base64url")}get minLength(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}je.create=n=>new je({checks:[],typeName:S.ZodString,coerce:(n==null?void 0:n.coerce)??!1,...j(n)});function $i(n,e){const t=(n.toString().split(".")[1]||"").length,r=(e.toString().split(".")[1]||"").length,s=t>r?t:r,a=Number.parseInt(n.toFixed(s).replace(".","")),i=Number.parseInt(e.toFixed(s).replace(".",""));return a%i/10**s}class Tt extends Z{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==k.number){const a=this._getOrReturnCtx(e);return T(a,{code:x.invalid_type,expected:k.number,received:a.parsedType}),N}let r;const s=new le;for(const a of this._def.checks)a.kind==="int"?J.isInteger(e.data)||(r=this._getOrReturnCtx(e,r),T(r,{code:x.invalid_type,expected:"integer",received:"float",message:a.message}),s.dirty()):a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.too_small,minimum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.too_big,maximum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="multipleOf"?$i(e.data,a.value)!==0&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):a.kind==="finite"?Number.isFinite(e.data)||(r=this._getOrReturnCtx(e,r),T(r,{code:x.not_finite,message:a.message}),s.dirty()):J.assertNever(a);return{status:s.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,C.toString(t))}gt(e,t){return this.setLimit("min",e,!1,C.toString(t))}lte(e,t){return this.setLimit("max",e,!0,C.toString(t))}lt(e,t){return this.setLimit("max",e,!1,C.toString(t))}setLimit(e,t,r,s){return new Tt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:C.toString(s)}]})}_addCheck(e){return new Tt({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:C.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:C.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:C.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:C.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:C.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:C.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:C.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:C.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:C.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&J.isInteger(e.value))}get isFinite(){let e=null,t=null;for(const r of this._def.checks){if(r.kind==="finite"||r.kind==="int"||r.kind==="multipleOf")return!0;r.kind==="min"?(t===null||r.value>t)&&(t=r.value):r.kind==="max"&&(e===null||r.value<e)&&(e=r.value)}return Number.isFinite(t)&&Number.isFinite(e)}}Tt.create=n=>new Tt({checks:[],typeName:S.ZodNumber,coerce:(n==null?void 0:n.coerce)||!1,...j(n)});class Wt extends Z{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce)try{e.data=BigInt(e.data)}catch{return this._getInvalidInput(e)}if(this._getType(e)!==k.bigint)return this._getInvalidInput(e);let r;const s=new le;for(const a of this._def.checks)a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.too_small,type:"bigint",minimum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.too_big,type:"bigint",maximum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="multipleOf"?e.data%a.value!==BigInt(0)&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):J.assertNever(a);return{status:s.value,value:e.data}}_getInvalidInput(e){const t=this._getOrReturnCtx(e);return T(t,{code:x.invalid_type,expected:k.bigint,received:t.parsedType}),N}gte(e,t){return this.setLimit("min",e,!0,C.toString(t))}gt(e,t){return this.setLimit("min",e,!1,C.toString(t))}lte(e,t){return this.setLimit("max",e,!0,C.toString(t))}lt(e,t){return this.setLimit("max",e,!1,C.toString(t))}setLimit(e,t,r,s){return new Wt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:C.toString(s)}]})}_addCheck(e){return new Wt({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:C.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:C.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:C.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:C.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:C.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Wt.create=n=>new Wt({checks:[],typeName:S.ZodBigInt,coerce:(n==null?void 0:n.coerce)??!1,...j(n)});class dr extends Z{_parse(e){if(this._def.coerce&&(e.data=!!e.data),this._getType(e)!==k.boolean){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.boolean,received:r.parsedType}),N}return we(e.data)}}dr.create=n=>new dr({typeName:S.ZodBoolean,coerce:(n==null?void 0:n.coerce)||!1,...j(n)});class On extends Z{_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==k.date){const a=this._getOrReturnCtx(e);return T(a,{code:x.invalid_type,expected:k.date,received:a.parsedType}),N}if(Number.isNaN(e.data.getTime())){const a=this._getOrReturnCtx(e);return T(a,{code:x.invalid_date}),N}const r=new le;let s;for(const a of this._def.checks)a.kind==="min"?e.data.getTime()<a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:x.too_small,message:a.message,inclusive:!0,exact:!1,minimum:a.value,type:"date"}),r.dirty()):a.kind==="max"?e.data.getTime()>a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:x.too_big,message:a.message,inclusive:!0,exact:!1,maximum:a.value,type:"date"}),r.dirty()):J.assertNever(a);return{status:r.value,value:new Date(e.data.getTime())}}_addCheck(e){return new On({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:C.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:C.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e!=null?new Date(e):null}}On.create=n=>new On({checks:[],coerce:(n==null?void 0:n.coerce)||!1,typeName:S.ZodDate,...j(n)});class us extends Z{_parse(e){if(this._getType(e)!==k.symbol){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.symbol,received:r.parsedType}),N}return we(e.data)}}us.create=n=>new us({typeName:S.ZodSymbol,...j(n)});class lr extends Z{_parse(e){if(this._getType(e)!==k.undefined){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.undefined,received:r.parsedType}),N}return we(e.data)}}lr.create=n=>new lr({typeName:S.ZodUndefined,...j(n)});class pr extends Z{_parse(e){if(this._getType(e)!==k.null){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.null,received:r.parsedType}),N}return we(e.data)}}pr.create=n=>new pr({typeName:S.ZodNull,...j(n)});class fr extends Z{constructor(){super(...arguments),this._any=!0}_parse(e){return we(e.data)}}fr.create=n=>new fr({typeName:S.ZodAny,...j(n)});class cs extends Z{constructor(){super(...arguments),this._unknown=!0}_parse(e){return we(e.data)}}cs.create=n=>new cs({typeName:S.ZodUnknown,...j(n)});class Be extends Z{_parse(e){const t=this._getOrReturnCtx(e);return T(t,{code:x.invalid_type,expected:k.never,received:t.parsedType}),N}}Be.create=n=>new Be({typeName:S.ZodNever,...j(n)});class ds extends Z{_parse(e){if(this._getType(e)!==k.undefined){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.void,received:r.parsedType}),N}return we(e.data)}}ds.create=n=>new ds({typeName:S.ZodVoid,...j(n)});class Oe extends Z{_parse(e){const{ctx:t,status:r}=this._processInputParams(e),s=this._def;if(t.parsedType!==k.array)return T(t,{code:x.invalid_type,expected:k.array,received:t.parsedType}),N;if(s.exactLength!==null){const i=t.data.length>s.exactLength.value,u=t.data.length<s.exactLength.value;(i||u)&&(T(t,{code:i?x.too_big:x.too_small,minimum:u?s.exactLength.value:void 0,maximum:i?s.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:s.exactLength.message}),r.dirty())}if(s.minLength!==null&&t.data.length<s.minLength.value&&(T(t,{code:x.too_small,minimum:s.minLength.value,type:"array",inclusive:!0,exact:!1,message:s.minLength.message}),r.dirty()),s.maxLength!==null&&t.data.length>s.maxLength.value&&(T(t,{code:x.too_big,maximum:s.maxLength.value,type:"array",inclusive:!0,exact:!1,message:s.maxLength.message}),r.dirty()),t.common.async)return Promise.all([...t.data].map((i,u)=>s.type._parseAsync(new Ee(t,i,t.path,u)))).then(i=>le.mergeArray(r,i));const a=[...t.data].map((i,u)=>s.type._parseSync(new Ee(t,i,t.path,u)));return le.mergeArray(r,a)}get element(){return this._def.type}min(e,t){return new Oe({...this._def,minLength:{value:e,message:C.toString(t)}})}max(e,t){return new Oe({...this._def,maxLength:{value:e,message:C.toString(t)}})}length(e,t){return new Oe({...this._def,exactLength:{value:e,message:C.toString(t)}})}nonempty(e){return this.min(1,e)}}Oe.create=(n,e)=>new Oe({type:n,minLength:null,maxLength:null,exactLength:null,typeName:S.ZodArray,...j(e)});function kt(n){if(n instanceof ne){const e={};for(const t in n.shape){const r=n.shape[t];e[t]=Fe.create(kt(r))}return new ne({...n._def,shape:()=>e})}else return n instanceof Oe?new Oe({...n._def,type:kt(n.element)}):n instanceof Fe?Fe.create(kt(n.unwrap())):n instanceof st?st.create(kt(n.unwrap())):n instanceof tt?tt.create(n.items.map(e=>kt(e))):n}class ne extends Z{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const e=this._def.shape(),t=J.objectKeys(e);return this._cached={shape:e,keys:t},this._cached}_parse(e){if(this._getType(e)!==k.object){const c=this._getOrReturnCtx(e);return T(c,{code:x.invalid_type,expected:k.object,received:c.parsedType}),N}const{status:r,ctx:s}=this._processInputParams(e),{shape:a,keys:i}=this._getCached(),u=[];if(!(this._def.catchall instanceof Be&&this._def.unknownKeys==="strip"))for(const c in s.data)i.includes(c)||u.push(c);const l=[];for(const c of i){const p=a[c],f=s.data[c];l.push({key:{status:"valid",value:c},value:p._parse(new Ee(s,f,s.path,c)),alwaysSet:c in s.data})}if(this._def.catchall instanceof Be){const c=this._def.unknownKeys;if(c==="passthrough")for(const p of u)l.push({key:{status:"valid",value:p},value:{status:"valid",value:s.data[p]}});else if(c==="strict")u.length>0&&(T(s,{code:x.unrecognized_keys,keys:u}),r.dirty());else if(c!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const c=this._def.catchall;for(const p of u){const f=s.data[p];l.push({key:{status:"valid",value:p},value:c._parse(new Ee(s,f,s.path,p)),alwaysSet:p in s.data})}}return s.common.async?Promise.resolve().then(async()=>{const c=[];for(const p of l){const f=await p.key,h=await p.value;c.push({key:f,value:h,alwaysSet:p.alwaysSet})}return c}).then(c=>le.mergeObjectSync(r,c)):le.mergeObjectSync(r,l)}get shape(){return this._def.shape()}strict(e){return C.errToObj,new ne({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(t,r)=>{var a,i;const s=((i=(a=this._def).errorMap)==null?void 0:i.call(a,t,r).message)??r.defaultError;return t.code==="unrecognized_keys"?{message:C.errToObj(e).message??s}:{message:s}}}:{}})}strip(){return new ne({...this._def,unknownKeys:"strip"})}passthrough(){return new ne({...this._def,unknownKeys:"passthrough"})}extend(e){return new ne({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new ne({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:S.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new ne({...this._def,catchall:e})}pick(e){const t={};for(const r of J.objectKeys(e))e[r]&&this.shape[r]&&(t[r]=this.shape[r]);return new ne({...this._def,shape:()=>t})}omit(e){const t={};for(const r of J.objectKeys(this.shape))e[r]||(t[r]=this.shape[r]);return new ne({...this._def,shape:()=>t})}deepPartial(){return kt(this)}partial(e){const t={};for(const r of J.objectKeys(this.shape)){const s=this.shape[r];e&&!e[r]?t[r]=s:t[r]=s.optional()}return new ne({...this._def,shape:()=>t})}required(e){const t={};for(const r of J.objectKeys(this.shape))if(e&&!e[r])t[r]=this.shape[r];else{let a=this.shape[r];for(;a instanceof Fe;)a=a._def.innerType;t[r]=a}return new ne({...this._def,shape:()=>t})}keyof(){return ps(J.objectKeys(this.shape))}}ne.create=(n,e)=>new ne({shape:()=>n,unknownKeys:"strip",catchall:Be.create(),typeName:S.ZodObject,...j(e)}),ne.strictCreate=(n,e)=>new ne({shape:()=>n,unknownKeys:"strict",catchall:Be.create(),typeName:S.ZodObject,...j(e)}),ne.lazycreate=(n,e)=>new ne({shape:n,unknownKeys:"strip",catchall:Be.create(),typeName:S.ZodObject,...j(e)});class Rn extends Z{_parse(e){const{ctx:t}=this._processInputParams(e),r=this._def.options;function s(a){for(const u of a)if(u.result.status==="valid")return u.result;for(const u of a)if(u.result.status==="dirty")return t.common.issues.push(...u.ctx.common.issues),u.result;const i=a.map(u=>new Me(u.ctx.common.issues));return T(t,{code:x.invalid_union,unionErrors:i}),N}if(t.common.async)return Promise.all(r.map(async a=>{const i={...t,common:{...t.common,issues:[]},parent:null};return{result:await a._parseAsync({data:t.data,path:t.path,parent:i}),ctx:i}})).then(s);{let a;const i=[];for(const l of r){const c={...t,common:{...t.common,issues:[]},parent:null},p=l._parseSync({data:t.data,path:t.path,parent:c});if(p.status==="valid")return p;p.status==="dirty"&&!a&&(a={result:p,ctx:c}),c.common.issues.length&&i.push(c.common.issues)}if(a)return t.common.issues.push(...a.ctx.common.issues),a.result;const u=i.map(l=>new Me(l));return T(t,{code:x.invalid_union,unionErrors:u}),N}}get options(){return this._def.options}}Rn.create=(n,e)=>new Rn({options:n,typeName:S.ZodUnion,...j(e)});const $e=n=>n instanceof Pn?$e(n.schema):n instanceof rt?$e(n.innerType()):n instanceof Mn?[n.value]:n instanceof nt?n.options:n instanceof gr?J.objectValues(n.enum):n instanceof $n?$e(n._def.innerType):n instanceof lr?[void 0]:n instanceof pr?[null]:n instanceof Fe?[void 0,...$e(n.unwrap())]:n instanceof st?[null,...$e(n.unwrap())]:n instanceof hs||n instanceof Ln?$e(n.unwrap()):n instanceof Fn?$e(n._def.innerType):[];class hr extends Z{_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==k.object)return T(t,{code:x.invalid_type,expected:k.object,received:t.parsedType}),N;const r=this.discriminator,s=t.data[r],a=this.optionsMap.get(s);return a?t.common.async?a._parseAsync({data:t.data,path:t.path,parent:t}):a._parseSync({data:t.data,path:t.path,parent:t}):(T(t,{code:x.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[r]}),N)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,r){const s=new Map;for(const a of t){const i=$e(a.shape[e]);if(!i.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const u of i){if(s.has(u))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(u)}`);s.set(u,a)}}return new hr({typeName:S.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:s,...j(r)})}}function mr(n,e){const t=Je(n),r=Je(e);if(n===e)return{valid:!0,data:n};if(t===k.object&&r===k.object){const s=J.objectKeys(e),a=J.objectKeys(n).filter(u=>s.indexOf(u)!==-1),i={...n,...e};for(const u of a){const l=mr(n[u],e[u]);if(!l.valid)return{valid:!1};i[u]=l.data}return{valid:!0,data:i}}else if(t===k.array&&r===k.array){if(n.length!==e.length)return{valid:!1};const s=[];for(let a=0;a<n.length;a++){const i=n[a],u=e[a],l=mr(i,u);if(!l.valid)return{valid:!1};s.push(l.data)}return{valid:!0,data:s}}else return t===k.date&&r===k.date&&+n==+e?{valid:!0,data:n}:{valid:!1}}class Nn extends Z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=(a,i)=>{if(rs(a)||rs(i))return N;const u=mr(a.value,i.value);return u.valid?((ss(a)||ss(i))&&t.dirty(),{status:t.value,value:u.data}):(T(r,{code:x.invalid_intersection_types}),N)};return r.common.async?Promise.all([this._def.left._parseAsync({data:r.data,path:r.path,parent:r}),this._def.right._parseAsync({data:r.data,path:r.path,parent:r})]).then(([a,i])=>s(a,i)):s(this._def.left._parseSync({data:r.data,path:r.path,parent:r}),this._def.right._parseSync({data:r.data,path:r.path,parent:r}))}}Nn.create=(n,e,t)=>new Nn({left:n,right:e,typeName:S.ZodIntersection,...j(t)});class tt extends Z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.array)return T(r,{code:x.invalid_type,expected:k.array,received:r.parsedType}),N;if(r.data.length<this._def.items.length)return T(r,{code:x.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),N;!this._def.rest&&r.data.length>this._def.items.length&&(T(r,{code:x.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());const a=[...r.data].map((i,u)=>{const l=this._def.items[u]||this._def.rest;return l?l._parse(new Ee(r,i,r.path,u)):null}).filter(i=>!!i);return r.common.async?Promise.all(a).then(i=>le.mergeArray(t,i)):le.mergeArray(t,a)}get items(){return this._def.items}rest(e){return new tt({...this._def,rest:e})}}tt.create=(n,e)=>{if(!Array.isArray(n))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new tt({items:n,typeName:S.ZodTuple,rest:null,...j(e)})};class Dn extends Z{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.object)return T(r,{code:x.invalid_type,expected:k.object,received:r.parsedType}),N;const s=[],a=this._def.keyType,i=this._def.valueType;for(const u in r.data)s.push({key:a._parse(new Ee(r,u,r.path,u)),value:i._parse(new Ee(r,r.data[u],r.path,u)),alwaysSet:u in r.data});return r.common.async?le.mergeObjectAsync(t,s):le.mergeObjectSync(t,s)}get element(){return this._def.valueType}static create(e,t,r){return t instanceof Z?new Dn({keyType:e,valueType:t,typeName:S.ZodRecord,...j(r)}):new Dn({keyType:je.create(),valueType:e,typeName:S.ZodRecord,...j(t)})}}class ls extends Z{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.map)return T(r,{code:x.invalid_type,expected:k.map,received:r.parsedType}),N;const s=this._def.keyType,a=this._def.valueType,i=[...r.data.entries()].map(([u,l],c)=>({key:s._parse(new Ee(r,u,r.path,[c,"key"])),value:a._parse(new Ee(r,l,r.path,[c,"value"]))}));if(r.common.async){const u=new Map;return Promise.resolve().then(async()=>{for(const l of i){const c=await l.key,p=await l.value;if(c.status==="aborted"||p.status==="aborted")return N;(c.status==="dirty"||p.status==="dirty")&&t.dirty(),u.set(c.value,p.value)}return{status:t.value,value:u}})}else{const u=new Map;for(const l of i){const c=l.key,p=l.value;if(c.status==="aborted"||p.status==="aborted")return N;(c.status==="dirty"||p.status==="dirty")&&t.dirty(),u.set(c.value,p.value)}return{status:t.value,value:u}}}}ls.create=(n,e,t)=>new ls({valueType:e,keyType:n,typeName:S.ZodMap,...j(t)});class Ht extends Z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.set)return T(r,{code:x.invalid_type,expected:k.set,received:r.parsedType}),N;const s=this._def;s.minSize!==null&&r.data.size<s.minSize.value&&(T(r,{code:x.too_small,minimum:s.minSize.value,type:"set",inclusive:!0,exact:!1,message:s.minSize.message}),t.dirty()),s.maxSize!==null&&r.data.size>s.maxSize.value&&(T(r,{code:x.too_big,maximum:s.maxSize.value,type:"set",inclusive:!0,exact:!1,message:s.maxSize.message}),t.dirty());const a=this._def.valueType;function i(l){const c=new Set;for(const p of l){if(p.status==="aborted")return N;p.status==="dirty"&&t.dirty(),c.add(p.value)}return{status:t.value,value:c}}const u=[...r.data.values()].map((l,c)=>a._parse(new Ee(r,l,r.path,c)));return r.common.async?Promise.all(u).then(l=>i(l)):i(u)}min(e,t){return new Ht({...this._def,minSize:{value:e,message:C.toString(t)}})}max(e,t){return new Ht({...this._def,maxSize:{value:e,message:C.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}Ht.create=(n,e)=>new Ht({valueType:n,minSize:null,maxSize:null,typeName:S.ZodSet,...j(e)});class Pn extends Z{get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}Pn.create=(n,e)=>new Pn({getter:n,typeName:S.ZodLazy,...j(e)});class Mn extends Z{_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return T(t,{received:t.data,code:x.invalid_literal,expected:this._def.value}),N}return{status:"valid",value:e.data}}get value(){return this._def.value}}Mn.create=(n,e)=>new Mn({value:n,typeName:S.ZodLiteral,...j(e)});function ps(n,e){return new nt({values:n,typeName:S.ZodEnum,...j(e)})}class nt extends Z{_parse(e){if(typeof e.data!="string"){const t=this._getOrReturnCtx(e),r=this._def.values;return T(t,{expected:J.joinValues(r),received:t.parsedType,code:x.invalid_type}),N}if(this._cache||(this._cache=new Set(this._def.values)),!this._cache.has(e.data)){const t=this._getOrReturnCtx(e),r=this._def.values;return T(t,{received:t.data,code:x.invalid_enum_value,options:r}),N}return we(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e,t=this._def){return nt.create(e,{...this._def,...t})}exclude(e,t=this._def){return nt.create(this.options.filter(r=>!e.includes(r)),{...this._def,...t})}}nt.create=ps;class gr extends Z{_parse(e){const t=J.getValidEnumValues(this._def.values),r=this._getOrReturnCtx(e);if(r.parsedType!==k.string&&r.parsedType!==k.number){const s=J.objectValues(t);return T(r,{expected:J.joinValues(s),received:r.parsedType,code:x.invalid_type}),N}if(this._cache||(this._cache=new Set(J.getValidEnumValues(this._def.values))),!this._cache.has(e.data)){const s=J.objectValues(t);return T(r,{received:r.data,code:x.invalid_enum_value,options:s}),N}return we(e.data)}get enum(){return this._def.values}}gr.create=(n,e)=>new gr({values:n,typeName:S.ZodNativeEnum,...j(e)});class jn extends Z{unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==k.promise&&t.common.async===!1)return T(t,{code:x.invalid_type,expected:k.promise,received:t.parsedType}),N;const r=t.parsedType===k.promise?t.data:Promise.resolve(t.data);return we(r.then(s=>this._def.type.parseAsync(s,{path:t.path,errorMap:t.common.contextualErrorMap})))}}jn.create=(n,e)=>new jn({type:n,typeName:S.ZodPromise,...j(e)});class rt extends Z{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===S.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=this._def.effect||null,a={addIssue:i=>{T(r,i),i.fatal?t.abort():t.dirty()},get path(){return r.path}};if(a.addIssue=a.addIssue.bind(a),s.type==="preprocess"){const i=s.transform(r.data,a);if(r.common.async)return Promise.resolve(i).then(async u=>{if(t.value==="aborted")return N;const l=await this._def.schema._parseAsync({data:u,path:r.path,parent:r});return l.status==="aborted"?N:l.status==="dirty"||t.value==="dirty"?Vt(l.value):l});{if(t.value==="aborted")return N;const u=this._def.schema._parseSync({data:i,path:r.path,parent:r});return u.status==="aborted"?N:u.status==="dirty"||t.value==="dirty"?Vt(u.value):u}}if(s.type==="refinement"){const i=u=>{const l=s.refinement(u,a);if(r.common.async)return Promise.resolve(l);if(l instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return u};if(r.common.async===!1){const u=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});return u.status==="aborted"?N:(u.status==="dirty"&&t.dirty(),i(u.value),{status:t.value,value:u.value})}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(u=>u.status==="aborted"?N:(u.status==="dirty"&&t.dirty(),i(u.value).then(()=>({status:t.value,value:u.value}))))}if(s.type==="transform")if(r.common.async===!1){const i=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});if(!It(i))return N;const u=s.transform(i.value,a);if(u instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:u}}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(i=>It(i)?Promise.resolve(s.transform(i.value,a)).then(u=>({status:t.value,value:u})):N);J.assertNever(s)}}rt.create=(n,e,t)=>new rt({schema:n,typeName:S.ZodEffects,effect:e,...j(t)}),rt.createWithPreprocess=(n,e,t)=>new rt({schema:e,effect:{type:"preprocess",transform:n},typeName:S.ZodEffects,...j(t)});class Fe extends Z{_parse(e){return this._getType(e)===k.undefined?we(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Fe.create=(n,e)=>new Fe({innerType:n,typeName:S.ZodOptional,...j(e)});class st extends Z{_parse(e){return this._getType(e)===k.null?we(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}st.create=(n,e)=>new st({innerType:n,typeName:S.ZodNullable,...j(e)});class $n extends Z{_parse(e){const{ctx:t}=this._processInputParams(e);let r=t.data;return t.parsedType===k.undefined&&(r=this._def.defaultValue()),this._def.innerType._parse({data:r,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}$n.create=(n,e)=>new $n({innerType:n,typeName:S.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...j(e)});class Fn extends Z{_parse(e){const{ctx:t}=this._processInputParams(e),r={...t,common:{...t.common,issues:[]}},s=this._def.innerType._parse({data:r.data,path:r.path,parent:{...r}});return En(s)?s.then(a=>({status:"valid",value:a.status==="valid"?a.value:this._def.catchValue({get error(){return new Me(r.common.issues)},input:r.data})})):{status:"valid",value:s.status==="valid"?s.value:this._def.catchValue({get error(){return new Me(r.common.issues)},input:r.data})}}removeCatch(){return this._def.innerType}}Fn.create=(n,e)=>new Fn({innerType:n,typeName:S.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...j(e)});class fs extends Z{_parse(e){if(this._getType(e)!==k.nan){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.nan,received:r.parsedType}),N}return{status:"valid",value:e.data}}}fs.create=n=>new fs({typeName:S.ZodNaN,...j(n)});class hs extends Z{_parse(e){const{ctx:t}=this._processInputParams(e),r=t.data;return this._def.type._parse({data:r,path:t.path,parent:t})}unwrap(){return this._def.type}}class _r extends Z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.common.async)return(async()=>{const a=await this._def.in._parseAsync({data:r.data,path:r.path,parent:r});return a.status==="aborted"?N:a.status==="dirty"?(t.dirty(),Vt(a.value)):this._def.out._parseAsync({data:a.value,path:r.path,parent:r})})();{const s=this._def.in._parseSync({data:r.data,path:r.path,parent:r});return s.status==="aborted"?N:s.status==="dirty"?(t.dirty(),{status:"dirty",value:s.value}):this._def.out._parseSync({data:s.value,path:r.path,parent:r})}}static create(e,t){return new _r({in:e,out:t,typeName:S.ZodPipeline})}}class Ln extends Z{_parse(e){const t=this._def.innerType._parse(e),r=s=>(It(s)&&(s.value=Object.freeze(s.value)),s);return En(t)?t.then(s=>r(s)):r(t)}unwrap(){return this._def.innerType}}Ln.create=(n,e)=>new Ln({innerType:n,typeName:S.ZodReadonly,...j(e)});var S;(function(n){n.ZodString="ZodString",n.ZodNumber="ZodNumber",n.ZodNaN="ZodNaN",n.ZodBigInt="ZodBigInt",n.ZodBoolean="ZodBoolean",n.ZodDate="ZodDate",n.ZodSymbol="ZodSymbol",n.ZodUndefined="ZodUndefined",n.ZodNull="ZodNull",n.ZodAny="ZodAny",n.ZodUnknown="ZodUnknown",n.ZodNever="ZodNever",n.ZodVoid="ZodVoid",n.ZodArray="ZodArray",n.ZodObject="ZodObject",n.ZodUnion="ZodUnion",n.ZodDiscriminatedUnion="ZodDiscriminatedUnion",n.ZodIntersection="ZodIntersection",n.ZodTuple="ZodTuple",n.ZodRecord="ZodRecord",n.ZodMap="ZodMap",n.ZodSet="ZodSet",n.ZodFunction="ZodFunction",n.ZodLazy="ZodLazy",n.ZodLiteral="ZodLiteral",n.ZodEnum="ZodEnum",n.ZodEffects="ZodEffects",n.ZodNativeEnum="ZodNativeEnum",n.ZodOptional="ZodOptional",n.ZodNullable="ZodNullable",n.ZodDefault="ZodDefault",n.ZodCatch="ZodCatch",n.ZodPromise="ZodPromise",n.ZodBranded="ZodBranded",n.ZodPipeline="ZodPipeline",n.ZodReadonly="ZodReadonly"})(S||(S={}));const d=je.create,A=Tt.create,at=dr.create,U=fr.create;Be.create;const B=Oe.create,m=ne.create,ms=Rn.create,he=hr.create;Nn.create,tt.create;const re=Dn.create,Fi=Pn.create,g=Mn.create,oe=nt.create;jn.create,Fe.create,st.create;function Li(){return{}}function Zi(n,e){var r,s;const t={type:"array"};return((s=(r=n.type)==null?void 0:r._def)==null?void 0:s.typeName)!==S.ZodAny&&(t.items=G(n.type._def,{...e,currentPath:[...e.currentPath,"items"]})),n.minLength&&W(t,"minItems",n.minLength.value,n.minLength.message,e),n.maxLength&&W(t,"maxItems",n.maxLength.value,n.maxLength.message,e),n.exactLength&&(W(t,"minItems",n.exactLength.value,n.exactLength.message,e),W(t,"maxItems",n.exactLength.value,n.exactLength.message,e)),t}function Ui(n,e){const t={type:"integer",format:"int64"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"min":e.target==="jsonSchema7"?r.inclusive?W(t,"minimum",r.value,r.message,e):W(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),W(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?W(t,"maximum",r.value,r.message,e):W(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),W(t,"maximum",r.value,r.message,e));break;case"multipleOf":W(t,"multipleOf",r.value,r.message,e);break}return t}function qi(){return{type:"boolean"}}function Ji(n,e){return G(n.type._def,e)}const Bi=(n,e)=>G(n.innerType._def,e);function gs(n,e,t){const r=t??e.dateStrategy;if(Array.isArray(r))return{anyOf:r.map((s,a)=>gs(n,e,s))};switch(r){case"string":case"format:date-time":return{type:"string",format:"date-time"};case"format:date":return{type:"string",format:"date"};case"integer":return Gi(n,e)}}const Gi=(n,e)=>{const t={type:"integer",format:"unix-time"};if(e.target==="openApi3")return t;for(const r of n.checks)switch(r.kind){case"min":W(t,"minimum",r.value,r.message,e);break;case"max":W(t,"maximum",r.value,r.message,e);break}return t};function zi(n,e){return{...G(n.innerType._def,e),default:n.defaultValue()}}function Vi(n,e,t){return e.effectStrategy==="input"?G(n.schema._def,e,t):{}}function Wi(n){return{type:"string",enum:[...n.values]}}const Hi=n=>"type"in n&&n.type==="string"?!1:"allOf"in n;function Ki(n,e){const t=[G(n.left._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),G(n.right._def,{...e,currentPath:[...e.currentPath,"allOf","1"]})].filter(a=>!!a);let r=e.target==="jsonSchema2019-09"?{unevaluatedProperties:!1}:void 0;const s=[];return t.forEach(a=>{if(Hi(a))s.push(...a.allOf),a.unevaluatedProperties===void 0&&(r=void 0);else{let i=a;if("additionalProperties"in a&&a.additionalProperties===!1){const{additionalProperties:u,...l}=a;i=l}else r=void 0;s.push(i)}}),s.length?{allOf:s,...r}:void 0}function Yi(n,e){const t=typeof n.value;return t!=="bigint"&&t!=="number"&&t!=="boolean"&&t!=="string"?{type:Array.isArray(n.value)?"array":"object"}:e.target==="openApi3"?{type:t==="bigint"?"integer":t,enum:[n.value]}:{type:t==="bigint"?"integer":t,const:n.value}}let yr;const it={cuid:/^[cC][^\s-]{8,}$/,cuid2:/^[0-9a-z]+$/,ulid:/^[0-9A-HJKMNP-TV-Z]{26}$/,email:/^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,emoji:()=>(yr===void 0&&(yr=RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),yr),base64:/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,nanoid:/^[a-zA-Z0-9_-]{21}$/};function _s(n,e){const t={type:"string"};function r(s){return e.patternStrategy==="escape"?Xi(s):s}if(n.checks)for(const s of n.checks)switch(s.kind){case"min":W(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e);break;case"max":W(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"email":switch(e.emailStrategy){case"format:email":Te(t,"email",s.message,e);break;case"format:idn-email":Te(t,"idn-email",s.message,e);break;case"pattern:zod":ke(t,it.email,s.message,e);break}break;case"url":Te(t,"uri",s.message,e);break;case"uuid":Te(t,"uuid",s.message,e);break;case"regex":ke(t,s.regex,s.message,e);break;case"cuid":ke(t,it.cuid,s.message,e);break;case"cuid2":ke(t,it.cuid2,s.message,e);break;case"startsWith":ke(t,RegExp(`^${r(s.value)}`),s.message,e);break;case"endsWith":ke(t,RegExp(`${r(s.value)}$`),s.message,e);break;case"datetime":Te(t,"date-time",s.message,e);break;case"date":Te(t,"date",s.message,e);break;case"time":Te(t,"time",s.message,e);break;case"duration":Te(t,"duration",s.message,e);break;case"length":W(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e),W(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"includes":{ke(t,RegExp(r(s.value)),s.message,e);break}case"ip":{s.version!=="v6"&&Te(t,"ipv4",s.message,e),s.version!=="v4"&&Te(t,"ipv6",s.message,e);break}case"emoji":ke(t,it.emoji,s.message,e);break;case"ulid":{ke(t,it.ulid,s.message,e);break}case"base64":{switch(e.base64Strategy){case"format:binary":{Te(t,"binary",s.message,e);break}case"contentEncoding:base64":{W(t,"contentEncoding","base64",s.message,e);break}case"pattern:zod":{ke(t,it.base64,s.message,e);break}}break}case"nanoid":ke(t,it.nanoid,s.message,e)}return t}const Xi=n=>Array.from(n).map(e=>/[a-zA-Z0-9]/.test(e)?e:`\\${e}`).join(""),Te=(n,e,t,r)=>{var s;n.format||(s=n.anyOf)!=null&&s.some(a=>a.format)?(n.anyOf||(n.anyOf=[]),n.format&&(n.anyOf.push({format:n.format,...n.errorMessage&&r.errorMessages&&{errorMessage:{format:n.errorMessage.format}}}),delete n.format,n.errorMessage&&(delete n.errorMessage.format,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.anyOf.push({format:e,...t&&r.errorMessages&&{errorMessage:{format:t}}})):W(n,"format",e,t,r)},ke=(n,e,t,r)=>{var s;n.pattern||(s=n.allOf)!=null&&s.some(a=>a.pattern)?(n.allOf||(n.allOf=[]),n.pattern&&(n.allOf.push({pattern:n.pattern,...n.errorMessage&&r.errorMessages&&{errorMessage:{pattern:n.errorMessage.pattern}}}),delete n.pattern,n.errorMessage&&(delete n.errorMessage.pattern,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.allOf.push({pattern:ys(e,r),...t&&r.errorMessages&&{errorMessage:{pattern:t}}})):W(n,"pattern",ys(e,r),t,r)},ys=(n,e)=>{var c;const t=typeof n=="function"?n():n;if(!e.applyRegexFlags||!t.flags)return t.source;const r={i:t.flags.includes("i"),m:t.flags.includes("m"),s:t.flags.includes("s")},s=r.i?t.source.toLowerCase():t.source;let a="",i=!1,u=!1,l=!1;for(let p=0;p<s.length;p++){if(i){a+=s[p],i=!1;continue}if(r.i){if(u){if(s[p].match(/[a-z]/)){l?(a+=s[p],a+=`${s[p-2]}-${s[p]}`.toUpperCase(),l=!1):s[p+1]==="-"&&((c=s[p+2])!=null&&c.match(/[a-z]/))?(a+=s[p],l=!0):a+=`${s[p]}${s[p].toUpperCase()}`;continue}}else if(s[p].match(/[a-z]/)){a+=`[${s[p]}${s[p].toUpperCase()}]`;continue}}if(r.m){if(s[p]==="^"){a+=`(^|(?<=[\r
]))`;continue}else if(s[p]==="$"){a+=`($|(?=[\r
]))`;continue}}if(r.s&&s[p]==="."){a+=u?`${s[p]}\r
`:`[${s[p]}\r
]`;continue}a+=s[p],s[p]==="\\"?i=!0:u&&s[p]==="]"?u=!1:!u&&s[p]==="["&&(u=!0)}try{const p=new RegExp(a)}catch{return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`),t.source}return a};function vs(n,e){var r,s,a,i;if(e.target==="openApi3"&&((r=n.keyType)==null?void 0:r._def.typeName)===S.ZodEnum)return{type:"object",required:n.keyType._def.values,properties:n.keyType._def.values.reduce((u,l)=>({...u,[l]:G(n.valueType._def,{...e,currentPath:[...e.currentPath,"properties",l]})??{}}),{}),additionalProperties:!1};const t={type:"object",additionalProperties:G(n.valueType._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??{}};if(e.target==="openApi3")return t;if(((s=n.keyType)==null?void 0:s._def.typeName)===S.ZodString&&((a=n.keyType._def.checks)!=null&&a.length)){const u=Object.entries(_s(n.keyType._def,e)).reduce((l,[c,p])=>c==="type"?l:{...l,[c]:p},{});return{...t,propertyNames:u}}else if(((i=n.keyType)==null?void 0:i._def.typeName)===S.ZodEnum)return{...t,propertyNames:{enum:n.keyType._def.values}};return t}function Qi(n,e){if(e.mapStrategy==="record")return vs(n,e);const t=G(n.keyType._def,{...e,currentPath:[...e.currentPath,"items","items","0"]})||{},r=G(n.valueType._def,{...e,currentPath:[...e.currentPath,"items","items","1"]})||{};return{type:"array",maxItems:125,items:{type:"array",items:[t,r],minItems:2,maxItems:2}}}function eo(n){const e=n.values,r=Object.keys(n.values).filter(a=>typeof e[e[a]]!="number").map(a=>e[a]),s=Array.from(new Set(r.map(a=>typeof a)));return{type:s.length===1?s[0]==="string"?"string":"number":["string","number"],enum:r}}function to(){return{not:{}}}function no(n){return n.target==="openApi3"?{enum:["null"],nullable:!0}:{type:"null"}}const Zn={ZodString:"string",ZodNumber:"number",ZodBigInt:"integer",ZodBoolean:"boolean",ZodNull:"null"};function ro(n,e){if(e.target==="openApi3")return ws(n,e);const t=n.options instanceof Map?Array.from(n.options.values()):n.options;if(t.every(r=>r._def.typeName in Zn&&(!r._def.checks||!r._def.checks.length))){const r=t.reduce((s,a)=>{const i=Zn[a._def.typeName];return i&&!s.includes(i)?[...s,i]:s},[]);return{type:r.length>1?r:r[0]}}else if(t.every(r=>r._def.typeName==="ZodLiteral"&&!r.description)){const r=t.reduce((s,a)=>{const i=typeof a._def.value;switch(i){case"string":case"number":case"boolean":return[...s,i];case"bigint":return[...s,"integer"];case"object":if(a._def.value===null)return[...s,"null"];case"symbol":case"undefined":case"function":default:return s}},[]);if(r.length===t.length){const s=r.filter((a,i,u)=>u.indexOf(a)===i);return{type:s.length>1?s:s[0],enum:t.reduce((a,i)=>a.includes(i._def.value)?a:[...a,i._def.value],[])}}}else if(t.every(r=>r._def.typeName==="ZodEnum"))return{type:"string",enum:t.reduce((r,s)=>[...r,...s._def.values.filter(a=>!r.includes(a))],[])};return ws(n,e)}const ws=(n,e)=>{const t=(n.options instanceof Map?Array.from(n.options.values()):n.options).map((r,s)=>G(r._def,{...e,currentPath:[...e.currentPath,"anyOf",`${s}`]})).filter(r=>!!r&&(!e.strictUnions||typeof r=="object"&&Object.keys(r).length>0));return t.length?{anyOf:t}:void 0};function so(n,e){if(["ZodString","ZodNumber","ZodBigInt","ZodBoolean","ZodNull"].includes(n.innerType._def.typeName)&&(!n.innerType._def.checks||!n.innerType._def.checks.length))return e.target==="openApi3"||e.nullableStrategy==="property"?{type:Zn[n.innerType._def.typeName],nullable:!0}:{type:[Zn[n.innerType._def.typeName],"null"]};if(e.target==="openApi3"){const r=G(n.innerType._def,{...e,currentPath:[...e.currentPath]});return r&&"$ref"in r?{allOf:[r],nullable:!0}:r&&{...r,nullable:!0}}const t=G(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","0"]});return t&&{anyOf:[t,{type:"null"}]}}function ao(n,e){const t={type:"number"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"int":t.type="integer",ts(t,"type",r.message,e);break;case"min":e.target==="jsonSchema7"?r.inclusive?W(t,"minimum",r.value,r.message,e):W(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),W(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?W(t,"maximum",r.value,r.message,e):W(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),W(t,"maximum",r.value,r.message,e));break;case"multipleOf":W(t,"multipleOf",r.value,r.message,e);break}return t}function io(n,e){return e.removeAdditionalStrategy==="strict"?n.catchall._def.typeName==="ZodNever"?n.unknownKeys!=="strict":G(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0:n.catchall._def.typeName==="ZodNever"?n.unknownKeys==="passthrough":G(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0}function oo(n,e){const t={type:"object",...Object.entries(n.shape()).reduce((r,[s,a])=>{var l;if(a===void 0||a._def===void 0)return r;const i=[...e.currentPath,"properties",s],u=G(a._def,{...e,currentPath:i,propertyPath:i});if(u===void 0)return r;if(e.openaiStrictMode&&a.isOptional()&&!a.isNullable()&&typeof((l=a._def)==null?void 0:l.defaultValue)>"u")throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);return{properties:{...r.properties,[s]:u},required:a.isOptional()&&!e.openaiStrictMode?r.required:[...r.required,s]}},{properties:{},required:[]}),additionalProperties:io(n,e)};return t.required.length||delete t.required,t}const uo=(n,e)=>{if(e.propertyPath&&e.currentPath.slice(0,e.propertyPath.length).toString()===e.propertyPath.toString())return G(n.innerType._def,{...e,currentPath:e.currentPath});const t=G(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","1"]});return t?{anyOf:[{not:{}},t]}:{}},co=(n,e)=>{if(e.pipeStrategy==="input")return G(n.in._def,e);if(e.pipeStrategy==="output")return G(n.out._def,e);const t=G(n.in._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),r=G(n.out._def,{...e,currentPath:[...e.currentPath,"allOf",t?"1":"0"]});return{allOf:[t,r].filter(s=>s!==void 0)}};function lo(n,e){return G(n.type._def,e)}function po(n,e){const r={type:"array",uniqueItems:!0,items:G(n.valueType._def,{...e,currentPath:[...e.currentPath,"items"]})};return n.minSize&&W(r,"minItems",n.minSize.value,n.minSize.message,e),n.maxSize&&W(r,"maxItems",n.maxSize.value,n.maxSize.message,e),r}function fo(n,e){return n.rest?{type:"array",minItems:n.items.length,items:n.items.map((t,r)=>G(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[]),additionalItems:G(n.rest._def,{...e,currentPath:[...e.currentPath,"additionalItems"]})}:{type:"array",minItems:n.items.length,maxItems:n.items.length,items:n.items.map((t,r)=>G(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[])}}function ho(){return{not:{}}}function mo(){return{}}const go=(n,e)=>G(n.innerType._def,e);function G(n,e,t=!1){var i;const r=e.seen.get(n);if(e.override){const u=(i=e.override)==null?void 0:i.call(e,n,e,r,t);if(u!==ci)return u}if(r&&!t){const u=_o(r,e);if(u!==void 0)return"$ref"in u&&e.seenRefs.add(u.$ref),u}const s={def:n,path:e.currentPath,jsonSchema:void 0};e.seen.set(n,s);const a=vo(n,n.typeName,e,t);return a&&wo(n,e,a),s.jsonSchema=a,a}const _o=(n,e)=>{switch(e.$refStrategy){case"root":return{$ref:n.path.join("/")};case"extract-to-root":const t=n.path.slice(e.basePath.length+1).join("_");return t!==e.name&&e.nameStrategy==="duplicate-ref"&&(e.definitions[t]=n.def),{$ref:[...e.basePath,e.definitionPath,t].join("/")};case"relative":return{$ref:yo(e.currentPath,n.path)};case"none":case"seen":return n.path.length<e.currentPath.length&&n.path.every((r,s)=>e.currentPath[s]===r)?(console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`),{}):e.$refStrategy==="seen"?{}:void 0}},yo=(n,e)=>{let t=0;for(;t<n.length&&t<e.length&&n[t]===e[t];t++);return[(n.length-t).toString(),...e.slice(t)].join("/")},vo=(n,e,t,r)=>{switch(e){case S.ZodString:return _s(n,t);case S.ZodNumber:return ao(n,t);case S.ZodObject:return oo(n,t);case S.ZodBigInt:return Ui(n,t);case S.ZodBoolean:return qi();case S.ZodDate:return gs(n,t);case S.ZodUndefined:return ho();case S.ZodNull:return no(t);case S.ZodArray:return Zi(n,t);case S.ZodUnion:case S.ZodDiscriminatedUnion:return ro(n,t);case S.ZodIntersection:return Ki(n,t);case S.ZodTuple:return fo(n,t);case S.ZodRecord:return vs(n,t);case S.ZodLiteral:return Yi(n,t);case S.ZodEnum:return Wi(n);case S.ZodNativeEnum:return eo(n);case S.ZodNullable:return so(n,t);case S.ZodOptional:return uo(n,t);case S.ZodMap:return Qi(n,t);case S.ZodSet:return po(n,t);case S.ZodLazy:return G(n.getter()._def,t);case S.ZodPromise:return lo(n,t);case S.ZodNaN:case S.ZodNever:return to();case S.ZodEffects:return Vi(n,t,r);case S.ZodAny:return Li();case S.ZodUnknown:return mo();case S.ZodDefault:return zi(n,t);case S.ZodBranded:return Ji(n,t);case S.ZodReadonly:return go(n,t);case S.ZodCatch:return Bi(n,t);case S.ZodPipeline:return co(n,t);case S.ZodFunction:case S.ZodVoid:case S.ZodSymbol:return;default:return(s=>{})()}},wo=(n,e,t)=>(n.description&&(t.description=n.description,e.markdownDescription&&(t.markdownDescription=n.description)),t),bo=(n,e)=>{const t=pi(e),r=typeof e=="string"?e:(e==null?void 0:e.nameStrategy)==="title"||e==null?void 0:e.name,s=G(n._def,r===void 0?t:{...t,currentPath:[...t.basePath,t.definitionPath,r]},!1)??{},a=typeof e=="object"&&e.name!==void 0&&e.nameStrategy==="title"?e.name:void 0;a!==void 0&&(s.title=a);const i=(()=>{if(li(t.definitions))return;const l={},c=new Set;for(let p=0;p<500;p++){const f=Object.entries(t.definitions).filter(([h])=>!c.has(h));if(f.length===0)break;for(const[h,b]of f)l[h]=G(or(b),{...t,currentPath:[...t.basePath,t.definitionPath,h]},!0)??{},c.add(h)}return l})(),u=r===void 0?i?{...s,[t.definitionPath]:i}:s:t.nameStrategy==="duplicate-ref"?{...s,...i||t.seenRefs.size?{[t.definitionPath]:{...i,...t.seenRefs.size?{[r]:s}:void 0}}:void 0}:{$ref:[...t.$refStrategy==="relative"?[]:t.basePath,t.definitionPath,r].join("/"),[t.definitionPath]:{...i,[r]:s}};return t.target==="jsonSchema7"?u.$schema="http://json-schema.org/draft-07/schema#":t.target==="jsonSchema2019-09"&&(u.$schema="https://json-schema.org/draft/2019-09/schema#"),u};function xo(n,{parser:e,callback:t}){const r={...n};return Object.defineProperties(r,{$brand:{value:"auto-parseable-tool",enumerable:!1},$parseRaw:{value:e,enumerable:!1},$callback:{value:t,enumerable:!1}}),r}function bs(n,e){return bo(n,{openaiStrictMode:!0,name:e.name,nameStrategy:"duplicate-ref",$refStrategy:"extract-to-root",nullableStrategy:"property"})}function So(n,e,t){return Cn({type:"json_schema",...t,name:e,strict:!0,schema:bs(n,{name:e})},r=>n.parse(JSON.parse(r)))}function Io(n){return xo({type:"function",name:n.name,parameters:bs(n.parameters,{name:n.name}),strict:!0},{callback:n.function,parser:e=>n.parameters.parse(JSON.parse(e))})}class Ge extends Error{constructor(t,r){super(t);_(this,"state");this.state=r}}class To extends Ge{}class xs extends Ge{}class me extends Ge{}class se extends Ge{}class Ss extends Ge{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class ko extends Ge{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class Is extends Ge{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}class Un extends Ge{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}function ot(n){return typeof n=="object"&&n!==null&&"_def"in n&&typeof n._def=="object"&&n._def!==null&&"typeName"in n._def&&n._def.typeName==="ZodObject"}function Ao(n){return typeof n=="object"&&n!==null&&"input"in n&&typeof n.input=="string"}function qn(n){if(n=n.replace(/\s/g,"_"),n=n.replace(/[^a-zA-Z0-9]/g,"_"),n.length===0)throw new Error("Tool name cannot be empty");return n}function vr(n,e){const t=r=>JSON.parse(r);if(ot(n)){const r=Io({name:e,parameters:n,function:()=>{}});return{schema:r.parameters,parser:r.$parseRaw}}else if(typeof n=="object"&&n!==null)return{schema:n,parser:t};throw new se("Input type is not a ZodObject or a valid JSON schema")}function Ts(n){if(n==="text")return"text";if(ot(n)){const e=So(n,"output");return{type:e.type,name:e.name,strict:e.strict||!1,schema:e.schema}}return n}function Co(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}var Jn={exports:{}},wr,ks;function Eo(){if(ks)return wr;ks=1;var n=1e3,e=n*60,t=e*60,r=t*24,s=r*7,a=r*365.25;wr=function(p,f){f=f||{};var h=typeof p;if(h==="string"&&p.length>0)return i(p);if(h==="number"&&isFinite(p))return f.long?l(p):u(p);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(p))};function i(p){if(p=String(p),!(p.length>100)){var f=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(p);if(f){var h=parseFloat(f[1]),b=(f[2]||"ms").toLowerCase();switch(b){case"years":case"year":case"yrs":case"yr":case"y":return h*a;case"weeks":case"week":case"w":return h*s;case"days":case"day":case"d":return h*r;case"hours":case"hour":case"hrs":case"hr":case"h":return h*t;case"minutes":case"minute":case"mins":case"min":case"m":return h*e;case"seconds":case"second":case"secs":case"sec":case"s":return h*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return h;default:return}}}}function u(p){var f=Math.abs(p);return f>=r?Math.round(p/r)+"d":f>=t?Math.round(p/t)+"h":f>=e?Math.round(p/e)+"m":f>=n?Math.round(p/n)+"s":p+"ms"}function l(p){var f=Math.abs(p);return f>=r?c(p,f,r,"day"):f>=t?c(p,f,t,"hour"):f>=e?c(p,f,e,"minute"):f>=n?c(p,f,n,"second"):p+" ms"}function c(p,f,h,b){var y=f>=h*1.5;return Math.round(p/h)+" "+b+(y?"s":"")}return wr}var br,As;function Oo(){if(As)return br;As=1;function n(e){r.debug=r,r.default=r,r.coerce=c,r.disable=u,r.enable=a,r.enabled=l,r.humanize=Eo(),r.destroy=p,Object.keys(e).forEach(f=>{r[f]=e[f]}),r.names=[],r.skips=[],r.formatters={};function t(f){let h=0;for(let b=0;b<f.length;b++)h=(h<<5)-h+f.charCodeAt(b),h|=0;return r.colors[Math.abs(h)%r.colors.length]}r.selectColor=t;function r(f){let h,b=null,y,w;function O(...R){if(!O.enabled)return;const q=O,X=Number(new Date),F=X-(h||X);q.diff=F,q.prev=h,q.curr=X,h=X,R[0]=r.coerce(R[0]),typeof R[0]!="string"&&R.unshift("%O");let V=0;R[0]=R[0].replace(/%([a-zA-Z%])/g,(ee,ve)=>{if(ee==="%%")return"%";V++;const Ce=r.formatters[ve];if(typeof Ce=="function"){const Ie=R[V];ee=Ce.call(q,Ie),R.splice(V,1),V--}return ee}),r.formatArgs.call(q,R),(q.log||r.log).apply(q,R)}return O.namespace=f,O.useColors=r.useColors(),O.color=r.selectColor(f),O.extend=s,O.destroy=r.destroy,Object.defineProperty(O,"enabled",{enumerable:!0,configurable:!1,get:()=>b!==null?b:(y!==r.namespaces&&(y=r.namespaces,w=r.enabled(f)),w),set:R=>{b=R}}),typeof r.init=="function"&&r.init(O),O}function s(f,h){const b=r(this.namespace+(typeof h>"u"?":":h)+f);return b.log=this.log,b}function a(f){r.save(f),r.namespaces=f,r.names=[],r.skips=[];const h=(typeof f=="string"?f:"").trim().replace(/\s+/g,",").split(",").filter(Boolean);for(const b of h)b[0]==="-"?r.skips.push(b.slice(1)):r.names.push(b)}function i(f,h){let b=0,y=0,w=-1,O=0;for(;b<f.length;)if(y<h.length&&(h[y]===f[b]||h[y]==="*"))h[y]==="*"?(w=y,O=b,y++):(b++,y++);else if(w!==-1)y=w+1,O++,b=O;else return!1;for(;y<h.length&&h[y]==="*";)y++;return y===h.length}function u(){const f=[...r.names,...r.skips.map(h=>"-"+h)].join(",");return r.enable(""),f}function l(f){for(const h of r.skips)if(i(f,h))return!1;for(const h of r.names)if(i(f,h))return!0;return!1}function c(f){return f instanceof Error?f.stack||f.message:f}function p(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return r.enable(r.load()),r}return br=n,br}var Cs;function Ro(){return Cs||(Cs=1,(function(n,e){e.formatArgs=r,e.save=s,e.load=a,e.useColors=t,e.storage=i(),e.destroy=(()=>{let l=!1;return()=>{l||(l=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function t(){if(typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs))return!0;if(typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let l;return typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&(l=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(l[1],10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function r(l){if(l[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+l[0]+(this.useColors?"%c ":" ")+"+"+n.exports.humanize(this.diff),!this.useColors)return;const c="color: "+this.color;l.splice(1,0,c,"color: inherit");let p=0,f=0;l[0].replace(/%[a-zA-Z%]/g,h=>{h!=="%%"&&(p++,h==="%c"&&(f=p))}),l.splice(f,0,c)}e.log=console.debug||console.log||(()=>{});function s(l){try{l?e.storage.setItem("debug",l):e.storage.removeItem("debug")}catch{}}function a(){let l;try{l=e.storage.getItem("debug")||e.storage.getItem("DEBUG")}catch{}return!l&&typeof process<"u"&&"env"in process&&(l=process.env.DEBUG),l}function i(){try{return localStorage}catch{}}n.exports=Oo()(e);const{formatters:u}=n.exports;u.j=function(l){try{return JSON.stringify(l)}catch(c){return"[UnexpectedJSONParseError]: "+c.message}}})(Jn,Jn.exports)),Jn.exports}var No=Ro();const Do=Co(No);function Es(){return Zo()}function Os(n){const e=Es();return typeof e<"u"&&(e[n]==="true"||e[n]==="1")}const Rs={get disabled(){return!0}},Ns={get dontLogModelData(){return Os("OPENAI_AGENTS_DONT_LOG_MODEL_DATA")},get dontLogToolData(){return Os("OPENAI_AGENTS_DONT_LOG_TOOL_DATA")}},Po=Ns.dontLogModelData,Mo=Ns.dontLogToolData;function Ds(n="openai-agents"){return{namespace:n,debug:Do(n),error:console.error,warn:console.warn,dontLogModelData:Po,dontLogToolData:Mo}}const E=Ds("openai-agents:core");function ze(n){if(n==null)return String(n);if(typeof n=="string")return n;if(typeof n=="object")try{return JSON.stringify(n)}catch{return"[object with circular references]"}return String(n)}function jo(n,e){return`An error occurred while running the tool. Please try again. Error: ${e instanceof Error?e.toString():String(e)}`}function Bn(n){const e=n.name?qn(n.name):qn(n.execute.name),t=typeof n.errorFunction>"u"?jo:n.errorFunction;if(!e)throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");const r=n.strict??!0;if(!r&&ot(n.parameters))throw new se("Strict mode is required for Zod parameters");const{parser:s,schema:a}=vr(n.parameters,e);async function i(p,f,h){const[b,y]=await te(()=>s(f));if(b!==null)throw E.dontLogToolData?E.debug(`Invalid JSON input for tool ${e}`):E.debug(`Invalid JSON input for tool ${e}: ${f}`),new me("Invalid JSON input for tool");E.dontLogToolData?E.debug(`Invoking tool ${e}`):E.debug(`Invoking tool ${e} with input ${f}`);const w=await n.execute(y,p,h),O=ze(w);return E.dontLogToolData?E.debug(`Tool ${e} completed`):E.debug(`Tool ${e} returned: ${O}`),w}async function u(p,f,h){return i(p,f,h).catch(b=>{if(t){const y=en();return y==null||y.setError({message:"Error running tool (non-fatal)",data:{tool_name:e,error:b.toString()}}),t(p,b)}throw b})}const l=typeof n.needsApproval=="function"?n.needsApproval:async()=>typeof n.needsApproval=="boolean"?n.needsApproval:!1,c=typeof n.isEnabled=="function"?async(p,f)=>{const h=n.isEnabled;return!!await h({runContext:p,agent:f})}:async()=>typeof n.isEnabled=="boolean"?n.isEnabled:!0;return{type:"function",name:e,description:n.description,parameters:a,strict:r,invoke:u,needsApproval:l,isEnabled:c}}m({name:d(),description:d().optional(),inputSchema:m({type:g("object"),properties:re(d(),U()),required:B(d()),additionalProperties:at()})});const xr={};async function $o({server:n,convertSchemasToStrict:e,runContext:t,agent:r}){return n.cacheToolsList&&xr[n.name]?xr[n.name].map(s=>Ps(s,n,e)):Cu(async s=>{const a=await n.listTools();let i=a;if(t&&r){const l={runContext:t,agent:r,serverName:n.name},c=[];for(const p of a){const f=n.toolFilter;if(f)if(typeof f=="function"){if(!await f(l,p)){E.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the callable filter.`);continue}}else{const h=f.allowedToolNames??[],b=f.blockedToolNames??[];if(h.length>0||b.length>0){const y=h.length>0?h.includes(p.name):!0,w=b.length>0?b.includes(p.name):!1;if(!y||w){w?E.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the static filter.`):y||E.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is not allowed by the static filter.`);continue}}}c.push(p)}i=c}s.spanData.result=i.map(l=>l.name);const u=i.map(l=>Ps(l,n,e));return n.cacheToolsList&&(xr[n.name]=i),u},{data:{server:n.name}})}async function Fo(n,e,t,r=!1){const s=Array.isArray(n)?{mcpServers:n,runContext:e,agent:t,convertSchemasToStrict:r}:n,{mcpServers:a,convertSchemasToStrict:i=!1,runContext:u,agent:l}=s,c=[],p=new Set;for(const f of a){const h=await $o({server:f,convertSchemasToStrict:i,runContext:u,agent:l}),y=[...new Set(h.map(w=>w.name))].filter(w=>p.has(w));if(y.length>0)throw new se(`Duplicate tool names found across MCP servers: ${y.join(", ")}`);for(const w of h)p.add(w.name),c.push(w)}return c}function Ps(n,e,t){var i,u,l,c;async function r(p,f){let h={};typeof p=="string"&&p?h=JSON.parse(p):typeof p=="object"&&p!=null&&(h=p);const b=en();b&&(b.spanData.mcp_data={server:e.name});const y=await e.callTool(n.name,h);return y.length===1?y[0]:y}const s={...n.inputSchema,type:((i=n.inputSchema)==null?void 0:i.type)??"object",properties:((u=n.inputSchema)==null?void 0:u.properties)??{},required:((l=n.inputSchema)==null?void 0:l.required)??[],additionalProperties:((c=n.inputSchema)==null?void 0:c.additionalProperties)??!1};if(t||s.additionalProperties===!0)try{const p=Lo(s);return Bn({name:n.name,description:n.description||"",parameters:p,strict:!0,execute:r})}catch(p){E.warn(`Error converting MCP schema to strict mode: ${p}`)}const a={...s,additionalProperties:!0};return Bn({name:n.name,description:n.description||"",parameters:a,strict:!1,execute:r})}function Lo(n){const e={...n,additionalProperties:!1};return e.required||(e.required=[]),e}function Zo(){return{}}class Gn{constructor(){I(this,Rt,new EventTarget);I(this,ht,new Map)}on(e,t){const r=e;let s=o(this,ht).get(r);s||(s=new Map,o(this,ht).set(r,s));let a=s.get(t);a||(a=new Set,s.set(t,a));const i=(u=>t(...u.detail??[]));return a.add(i),o(this,Rt).addEventListener(r,i),this}off(e,t){const r=e,s=o(this,ht).get(r),a=s==null?void 0:s.get(t);if(a!=null&&a.size){for(const i of a)o(this,Rt).removeEventListener(r,i);s==null||s.delete(t),(s==null?void 0:s.size)===0&&o(this,ht).delete(r)}return this}emit(e,...t){const r=new CustomEvent(e,{detail:t});return o(this,Rt).dispatchEvent(r)}once(e,t){const r=(...s)=>{this.off(e,r),t(...s)};return this.on(e,r),this}}Rt=new WeakMap,ht=new WeakMap;const Ms=()=>typeof crypto<"u"&&crypto.randomUUID?crypto.randomUUID():"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(n){const e=Math.random()*16|0;return(n==="x"?e:e&3|8).toString(16)}),Uo=class{constructor(){}pipeTo(e,t){}pipeThrough(e,t){}},qo=globalThis.ReadableStream,Jo=globalThis.TransformStream;class Bo{constructor(){_(this,"context",null)}run(e,t){return this.context=e,t()}getStore(){return this.context}enterWith(e){this.context=e}}class Go{constructor(){}setTimeout(e,t){const r=setTimeout(e,t);return r.ref=typeof r.ref=="function"?r.ref:()=>r,r.unref=typeof r.unref=="function"?r.unref:()=>r,r.hasRef=typeof r.hasRef=="function"?r.hasRef:()=>!0,r.refresh=typeof r.refresh=="function"?r.refresh:()=>r,r}clearTimeout(e){window.clearTimeout(e)}}const zo=new Go;class Sr{on(e,t){return this.eventEmitter.on(e,t),this.eventEmitter}off(e,t){return this.eventEmitter.off(e,t),this.eventEmitter}emit(e,...t){return this.eventEmitter.emit(e,...t)}once(e,t){return this.eventEmitter.once(e,t),this.eventEmitter}}class Vo extends Sr{constructor(){super(...arguments);_(this,"eventEmitter",new Gn)}}class Wo extends Sr{constructor(){super(...arguments);_(this,"eventEmitter",new Gn)}}const Ho="OPENAI_DEFAULT_MODEL";function zn(n){return n.startsWith("gpt-5-chat")?!1:n.startsWith("gpt-5")}function js(){return zn($s())}function $s(){var e;return((e=Es()[Ho])==null?void 0:e.toLowerCase())??"gpt-4.1"}function Ko(n){const e=$s();return zn(e)?{reasoning:{effort:"low"},text:{verbosity:"low"}}:{}}function Fs(n){return JSON.stringify({assistant:n.name})}function Yo(n){return`transfer_to_${qn(n.name)}`}function Xo(n){return`Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription??""}`}class Ls{constructor(e,t){_(this,"toolName");_(this,"toolDescription");_(this,"inputJsonSchema",{type:"object",properties:{},required:[],additionalProperties:!1});_(this,"strictJsonSchema",!0);_(this,"onInvokeHandoff");_(this,"agentName");_(this,"inputFilter");_(this,"agent");_(this,"isEnabled",async()=>!0);this.agentName=e.name,this.onInvokeHandoff=t,this.toolName=Yo(e),this.toolDescription=Xo(e),this.agent=e}getHandoffAsFunctionTool(){return{type:"function",name:this.toolName,description:this.toolDescription,parameters:this.inputJsonSchema,strict:this.strictJsonSchema}}}function Zs(n,e={}){let t;const r=!!e.onHandoff,s=!!e.inputType;if(!(r===s))throw new se("You must provide either both `onHandoff` and `inputType` or neither.");async function i(l,c){var p;if(t){if(!c)throw Et({message:`Handoff function expected non empty input but got: ${c}`,data:{details:"input is empty"}}),new me("Handoff function expected non empty input");try{const f=await t(c);e.onHandoff&&await e.onHandoff(l,f)}catch(f){throw Et({message:"Invalid JSON provided",data:{}}),E.dontLogToolData||E.error(`Invalid JSON when parsing: ${c}. Error: ${f}`),new me("Invalid JSON provided")}}else await((p=e.onHandoff)==null?void 0:p.call(e,l));return n}const u=new Ls(n,i);if(typeof e.isEnabled=="function"){const l=e.isEnabled;u.isEnabled=async({runContext:c,agent:p})=>!!await l({runContext:c,agent:p})}else typeof e.isEnabled=="boolean"&&(u.isEnabled=async()=>e.isEnabled);if(e.inputType){const l=vr(e.inputType,u.toolName);u.inputJsonSchema=l.schema,u.strictJsonSchema=!0,t=l.parser}return e.toolNameOverride&&(u.toolName=e.toolNameOverride),e.toolDescriptionOverride&&(u.toolDescription=e.toolDescriptionOverride),e.inputFilter&&(u.inputFilter=e.inputFilter),u}function Qo(n){return n instanceof Ls?n:Zs(n)}function Us(n){if(n.type!=="message"||n.role!=="assistant")return;const e=n.content[n.content.length-1];if(e.type==="output_text")return e.text}function eu(n){return n.output.length===0?"":Us(n.output[n.output.length-1])||""}const Ir=new WeakMap;function tu(n,e){n&&Ir.set(n,e)}function nu(n){const e=Ir.get(n);return e&&Ir.delete(n),e}const ru=m({input:d()}),Nt=class Nt extends Vo{constructor(t){super();_(this,"name");_(this,"instructions");_(this,"prompt");_(this,"handoffDescription");_(this,"handoffs");_(this,"model");_(this,"modelSettings");_(this,"tools");_(this,"mcpServers");_(this,"inputGuardrails");_(this,"outputGuardrails");_(this,"outputType","text");_(this,"toolUseBehavior");_(this,"resetToolChoice");if(typeof t.name!="string"||t.name.trim()==="")throw new se("Agent must have a name.");if(this.name=t.name,this.instructions=t.instructions??Nt.DEFAULT_MODEL_PLACEHOLDER,this.prompt=t.prompt,this.handoffDescription=t.handoffDescription??"",this.handoffs=t.handoffs??[],this.model=t.model??"",this.modelSettings=t.modelSettings??Ko(),this.tools=t.tools??[],this.mcpServers=t.mcpServers??[],this.inputGuardrails=t.inputGuardrails??[],this.outputGuardrails=t.outputGuardrails??[],t.outputType&&(this.outputType=t.outputType),this.toolUseBehavior=t.toolUseBehavior??"run_llm_again",this.resetToolChoice=t.resetToolChoice??!0,t.model!==void 0&&js()&&(typeof t.model!="string"||!zn(t.model))&&t.modelSettings===void 0&&(this.modelSettings={}),(t.handoffOutputTypeWarningEnabled===void 0||t.handoffOutputTypeWarningEnabled)&&this.handoffs&&this.outputType){const r=new Set([JSON.stringify(this.outputType)]);for(const s of this.handoffs)"outputType"in s&&s.outputType?r.add(JSON.stringify(s.outputType)):"agent"in s&&s.agent.outputType&&r.add(JSON.stringify(s.agent.outputType));r.size>1&&E.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`)}}static create(t){return new Nt({...t,handoffs:t.handoffs,outputType:t.outputType,handoffOutputTypeWarningEnabled:!1})}get outputSchemaName(){if(this.outputType==="text")return"text";if(ot(this.outputType))return"ZodOutput";if(typeof this.outputType=="object")return this.outputType.name;throw new Error(`Unknown output type: ${this.outputType}`)}clone(t){return new Nt({...this,...t})}asTool(t){const{toolName:r,toolDescription:s,customOutputExtractor:a,needsApproval:i,runConfig:u,runOptions:l,isEnabled:c}=t;return Bn({name:r??qn(this.name),description:s??"",parameters:ru,strict:!0,needsApproval:i,isEnabled:c,execute:async(p,f,h)=>{if(!Ao(p))throw new me("Agent tool called with invalid input");const y=await new Gu(u??{}).run(this,p.input,{context:f,...l??{}}),w=typeof this.toolUseBehavior=="object"&&this.toolUseBehavior!==null&&"stopAtToolNames"in this.toolUseBehavior;typeof a!="function"&&w&&E.debug(`You're passing the agent (name: ${this.name}) with toolUseBehavior.stopAtToolNames configured as a tool to a different agent; this may not work as you expect. You may want to have a wrapper function tool to consistently return the final output.`);const O=typeof a=="function"?await a(y):eu(y.rawResponses[y.rawResponses.length-1]);return h!=null&&h.toolCall&&tu(h.toolCall,y),O}})}async getSystemPrompt(t){return typeof this.instructions=="function"?await this.instructions(t,this):this.instructions}async getPrompt(t){return typeof this.prompt=="function"?await this.prompt(t,this):this.prompt}async getMcpTools(t){return this.mcpServers.length>0?Fo({mcpServers:this.mcpServers,runContext:t,agent:this,convertSchemasToStrict:!1}):[]}async getAllTools(t){const r=await this.getMcpTools(t),s=[];for(const a of this.tools){if(a.type==="function"){const i=a.isEnabled;if(!(typeof i=="function"?await i(t,this):typeof i=="boolean"?i:!0))continue}s.push(a)}return[...r,...s]}async getEnabledHandoffs(t){var a;const r=((a=this.handoffs)==null?void 0:a.map(i=>Qo(i)))??[],s=[];for(const i of r)await i.isEnabled({runContext:t,agent:this})&&s.push(i);return s}processFinalOutput(t){if(this.outputType==="text")return t;if(typeof this.outputType=="object"){const r=JSON.parse(t);return ot(this.outputType)?this.outputType.parse(r):r}throw new Error(`Unknown output type: ${this.outputType}`)}toJSON(){return{name:this.name}}};_(Nt,"DEFAULT_MODEL_PLACEHOLDER","");let ut=Nt;function qs({name:n,execute:e}){return{type:"input",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"input",name:n},output:await e(t)}}}}function Tr({name:n,execute:e}){return{type:"output",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"output",name:n},agent:t.agent,agentOutput:t.agentOutput,output:await e(t)}}}}function su(){throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.")}const ae=m({providerData:re(d(),U()).optional()}),ct=ae.extend({id:d().optional()}),au=ae.extend({type:g("refusal"),refusal:d()}),iu=ae.extend({type:g("output_text"),text:d()}),Js=ae.extend({type:g("input_text"),text:d()}),ou=ae.extend({type:g("reasoning_text"),text:d()}),uu=ae.extend({type:g("input_image"),image:d().or(m({id:d()})).describe("Could be a URL, base64 or an object with a file ID.")}),cu=ae.extend({type:g("input_file"),file:d().describe("Either base64 encoded file data or a publicly accessible file URL").or(m({id:d().describe("OpenAI file ID")})).or(m({url:d().describe("Publicly accessible PDF file URL")})).describe("Contents of the file or an object with a file ID.")}),Bs=ae.extend({type:g("audio"),audio:d().or(m({id:d()})).describe("Base64 encoded audio data or file id"),format:d().nullable().optional(),transcript:d().nullable().optional()}),du=ae.extend({type:g("image"),image:d().describe("Base64 encoded image data")}),lu=ae.extend({type:g("text"),text:d()}),pu=ae.extend({type:g("image"),data:d().describe("Base64 encoded image data"),mediaType:d().describe("IANA media type of the image")}),fu=ae.extend({type:g("computer_screenshot"),data:d().describe("Base64 encoded image data or URL")}),hu=he("type",[m({type:g("screenshot")}),m({type:g("click"),x:A(),y:A(),button:oe(["left","right","wheel","back","forward"])}),m({type:g("double_click"),x:A(),y:A()}),m({type:g("scroll"),x:A(),y:A(),scroll_x:A(),scroll_y:A()}),m({type:g("type"),text:d()}),m({type:g("wait")}),m({type:g("move"),x:A(),y:A()}),m({type:g("keypress"),keys:B(d())}),m({type:g("drag"),path:B(m({x:A(),y:A()}))})]),mu=he("type",[iu,au,Bs,du]),kr=ct.extend({type:g("message").optional()}),Vn=kr.extend({role:g("assistant"),status:oe(["in_progress","completed","incomplete"]),content:B(mu)}),gu=he("type",[Js,uu,cu,Bs]),Gs=kr.extend({role:g("user"),content:B(gu).or(d())}),zs=kr.extend({role:g("system"),content:d()});he("role",[zs,Vn,Gs]);const Kt=ct.extend({type:g("hosted_tool_call"),name:d().describe("The name of the hosted tool"),arguments:d().describe("The arguments of the hosted tool call").optional(),status:d().optional(),output:d().optional()}),Yt=ct.extend({type:g("function_call"),callId:d().describe("The ID of the tool call"),name:d().describe("The name of the function"),status:oe(["in_progress","completed","incomplete"]).optional(),arguments:d()}),Ar=ct.extend({type:g("function_call_result"),name:d().describe("The name of the tool"),callId:d().describe("The ID of the tool call"),status:oe(["in_progress","completed","incomplete"]),output:he("type",[lu,pu])}),Cr=ct.extend({type:g("computer_call"),callId:d().describe("The ID of the computer call"),status:oe(["in_progress","completed","incomplete"]),action:hu}),_u=ct.extend({type:g("computer_call_result"),callId:d().describe("The ID of the computer call"),output:fu}),yu=he("type",[Cr,Yt,Kt]),Er=ae.extend({id:d().optional(),type:g("reasoning"),content:B(Js),rawContent:B(ou).optional()}),Vs=ct.extend({type:g("unknown")}),Or=he("type",[Vn,Kt,Yt,Cr,Er,Vs]),vu=ms([Gs,Vn,zs,Kt,Yt,Cr,Ar,_u,Er,Vs]),wu=m({requests:A().optional(),inputTokens:A(),outputTokens:A(),totalTokens:A(),inputTokensDetails:re(d(),A()).optional(),outputTokensDetails:re(d(),A()).optional()}),Ws=ae.extend({type:g("output_text_delta"),delta:d()}),bu=ae.extend({type:g("response_started")}),Hs=ae.extend({type:g("response_done"),response:ae.extend({id:d(),usage:wu,output:B(Or)})}),xu=ae.extend({type:g("model"),event:U().describe("The event from the model")});he("type",[Ws,Hs,bu,xu]);class Wn{constructor(e){_(this,"requests");_(this,"inputTokens");_(this,"outputTokens");_(this,"totalTokens");_(this,"inputTokensDetails",[]);_(this,"outputTokensDetails",[]);if(typeof e>"u")this.requests=0,this.inputTokens=0,this.outputTokens=0,this.totalTokens=0,this.inputTokensDetails=[],this.outputTokensDetails=[];else{this.requests=(e==null?void 0:e.requests)??1,this.inputTokens=(e==null?void 0:e.inputTokens)??(e==null?void 0:e.input_tokens)??0,this.outputTokens=(e==null?void 0:e.outputTokens)??(e==null?void 0:e.output_tokens)??0,this.totalTokens=(e==null?void 0:e.totalTokens)??(e==null?void 0:e.total_tokens)??0;const t=(e==null?void 0:e.inputTokensDetails)??(e==null?void 0:e.input_tokens_details);this.inputTokensDetails=t?[t]:[];const r=(e==null?void 0:e.outputTokensDetails)??(e==null?void 0:e.output_tokens_details);this.outputTokensDetails=r?[r]:[]}}add(e){this.requests+=e.requests,this.inputTokens+=e.inputTokens,this.outputTokens+=e.outputTokens,this.totalTokens+=e.totalTokens,e.inputTokensDetails&&this.inputTokensDetails.push(...e.inputTokensDetails),e.outputTokensDetails&&this.outputTokensDetails.push(...e.outputTokensDetails)}}class At{constructor(e={}){_(this,"context");_(this,"usage");I(this,ge);this.context=e,this.usage=new Wn,v(this,ge,new Map)}_rebuildApprovals(e){v(this,ge,new Map(Object.entries(e)))}isToolApproved(e){const{toolName:t,callId:r}=e,s=o(this,ge).get(t);if((s==null?void 0:s.approved)===!0&&s.rejected===!0)return E.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"),!0;if((s==null?void 0:s.approved)===!0)return!0;if((s==null?void 0:s.rejected)===!0)return!1;const a=Array.isArray(s==null?void 0:s.approved)?s.approved.includes(r):!1,i=Array.isArray(s==null?void 0:s.rejected)?s.rejected.includes(r):!1;if(a&&i)return E.warn(`Tool call ${r} is both approved and rejected at the same time. Approval takes precedence`),!0;if(a)return!0;if(i)return!1}approveTool(e,{alwaysApprove:t=!1}={}){const r=e.rawItem.name;if(t){o(this,ge).set(r,{approved:!0,rejected:[]});return}const s=o(this,ge).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.approved)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.approved.push(a)}o(this,ge).set(r,s)}rejectTool(e,{alwaysReject:t=!1}={}){const r=e.rawItem.name;if(t){o(this,ge).set(r,{approved:!1,rejected:!0});return}const s=o(this,ge).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.rejected)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.rejected.push(a)}o(this,ge).set(r,s)}toJSON(){return{context:this.context,usage:this.usage,approvals:Object.fromEntries(o(this,ge).entries())}}}ge=new WeakMap;function Ks(n){return n.type==="function"?{type:"function",name:n.name,description:n.description,parameters:n.parameters,strict:n.strict}:n.type==="computer"?{type:"computer",name:n.name,environment:n.computer.environment,dimensions:n.computer.dimensions}:{type:"hosted_tool",name:n.name,providerData:n.providerData}}function Ys(n){return{toolName:n.toolName,toolDescription:n.toolDescription,inputJsonSchema:n.inputJsonSchema,strictJsonSchema:n.strictJsonSchema}}class dt{constructor(){_(this,"type","base_item");_(this,"rawItem")}toJSON(){return{type:this.type,rawItem:this.rawItem}}}class Hn extends dt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","message_output_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}get content(){let t="";for(const r of this.rawItem.content)r.type==="output_text"&&(t+=r.text);return t}}class lt extends dt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class Ct extends dt{constructor(t,r,s){super();_(this,"rawItem");_(this,"agent");_(this,"output");_(this,"type","tool_call_output_item");this.rawItem=t,this.agent=r,this.output=s}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON(),output:ze(this.output)}}}class Rr extends dt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","reasoning_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class Nr extends dt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","handoff_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class Dr extends dt{constructor(t,r,s){super();_(this,"rawItem");_(this,"sourceAgent");_(this,"targetAgent");_(this,"type","handoff_output_item");this.rawItem=t,this.sourceAgent=r,this.targetAgent=s}toJSON(){return{...super.toJSON(),sourceAgent:this.sourceAgent.toJSON(),targetAgent:this.targetAgent.toJSON()}}}class be extends dt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_approval_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}function Kn(n){return async(e,...t)=>jr(async()=>{const r=n(...t);er(r);try{return r.start(),await e(r)}catch(s){throw r.setError({message:s.message,data:s.data}),s}finally{r.end(),tn()}})}function Xs(n,e){var t;return De().createSpan({...n,data:{type:"agent",name:((t=n==null?void 0:n.data)==null?void 0:t.name)??"Agent",...n==null?void 0:n.data}},e)}function Su(n,e){var t,r;return De().createSpan({...n,data:{type:"function",input:((t=n==null?void 0:n.data)==null?void 0:t.input)??"",output:((r=n==null?void 0:n.data)==null?void 0:r.output)??"",...n==null?void 0:n.data}},e)}const Qs=Kn(Su);function Iu(n,e){return De().createSpan({...n,data:{type:"handoff",...n==null?void 0:n.data}},e)}const Tu=Kn(Iu);function ku(n,e){return De().createSpan({...n,data:{type:"guardrail",triggered:!1,...n==null?void 0:n.data}},e)}const ea=Kn(ku);function Au(n,e){return De().createSpan({...n,data:{type:"mcp_tools",...n==null?void 0:n.data}},e)}const Cu=Kn(Au);class Eu{constructor(e){_(this,"data");_(this,"type","raw_model_stream_event");this.data=e}}class Ou{constructor(e,t){_(this,"name");_(this,"item");_(this,"type","run_item_stream_event");this.name=e,this.item=t}}class Ru{constructor(e){_(this,"agent");_(this,"type","agent_updated_stream_event");this.agent=e}}function ta(n,e,t,r){var y;const s=[],a=[],i=[],u=[],l=[],c=[],p=new Map(r.map(w=>[w.toolName,w])),f=new Map(t.filter(w=>w.type==="function").map(w=>[w.name,w])),h=t.find(w=>w.type==="computer"),b=new Map(t.filter(w=>{var O;return w.type==="hosted_tool"&&((O=w.providerData)==null?void 0:O.type)==="mcp"}).map(w=>w).map(w=>[w.providerData.server_label,w]));for(const w of n.output){if(w.type==="message")w.role==="assistant"&&s.push(new Hn(w,e));else if(w.type==="hosted_tool_call"){s.push(new lt(w,e));const R=w.name;if(c.push(R),((y=w.providerData)==null?void 0:y.type)==="mcp_approval_request"||w.name==="mcp_approval_request"){const q=w.providerData,X=q.server_label,F=b.get(X);if(typeof F>"u"){const Q=`MCP server (${X}) not found in Agent (${e.name})`;throw Et({message:Q,data:{mcp_server_label:X}}),new me(Q)}const V=new be({type:"hosted_tool_call",name:q.name,id:q.id,status:"in_progress",providerData:q},e);l.push({requestItem:V,mcpTool:F}),F.providerData.on_approval||s.push(V)}}else if(w.type==="reasoning")s.push(new Rr(w,e));else if(w.type==="computer_call"){if(s.push(new lt(w,e)),c.push("computer_use"),!h)throw Et({message:"Model produced computer action without a computer tool.",data:{agent_name:e.name}}),new me("Model produced computer action without a computer tool.");u.push({toolCall:w,computer:h})}if(w.type!=="function_call")continue;c.push(w.name);const O=p.get(w.name);if(O)s.push(new Nr(w,e)),a.push({toolCall:w,handoff:O});else{const R=f.get(w.name);if(!R)throw Et({message:`Tool ${w.name} not found in agent ${e.name}.`,data:{tool_name:w.name,agent_name:e.name}}),new me(`Tool ${w.name} not found in agent ${e.name}.`);s.push(new lt(w,e)),i.push({toolCall:w,tool:R})}}return{newItems:s,handoffs:a,functions:i,computerActions:u,mcpApprovalRequests:l,toolsUsed:c,hasToolsOrApprovalsToRun(){return a.length>0||i.length>0||l.length>0||u.length>0}}}const Nu=he("type",[m({type:g("next_step_handoff"),newAgent:U()}),m({type:g("next_step_final_output"),output:d()}),m({type:g("next_step_run_again")}),m({type:g("next_step_interruption"),data:re(d(),U())})]);class xe{constructor(e,t,r,s,a){_(this,"originalInput");_(this,"modelResponse");_(this,"preStepItems");_(this,"newStepItems");_(this,"nextStep");this.originalInput=e,this.modelResponse=t,this.preStepItems=r,this.newStepItems=s,this.nextStep=a}get generatedItems(){return this.preStepItems.concat(this.newStepItems)}}function na(n,e,t){return n.resetToolChoice&&e.hasUsedTools(n)?{...t,toolChoice:void 0}:t}async function ra(n,e,t,r,s,a,i){const u=t.filter(y=>y instanceof be&&"callId"in y.rawItem&&y.rawItem.type==="function_call").map(y=>y.rawItem.callId),l=s.functions.filter(y=>u.includes(y.toolCall.callId)),c=await aa(n,l,a,i),p=c.map(y=>y.runItem),f=s.mcpApprovalRequests.filter(y=>{var w;return y.requestItem.type==="tool_approval_item"&&y.requestItem.rawItem.type==="hosted_tool_call"&&((w=y.requestItem.rawItem.providerData)==null?void 0:w.type)==="mcp_approval_request"});for(const y of f){const w=y.requestItem.rawItem.id,O=i._context.isToolApproved({toolName:y.requestItem.rawItem.name,callId:w});if(typeof O<"u"){const R={approve:O,approval_request_id:w,reason:void 0};p.push(new lt({type:"hosted_tool_call",name:"mcp_approval_response",providerData:R},n))}}const h=await ia(n,c,i),b=t.filter(y=>!(y instanceof be));return h.isFinalOutput?(a.emit("agent_end",i._context,n,h.finalOutput),n.emit("agent_end",i._context,h.finalOutput),new xe(e,r,b,p,{type:"next_step_final_output",output:h.finalOutput})):h.isInterrupted?new xe(e,r,b,p,{type:"next_step_interruption",data:{interruptions:h.interruptions}}):new xe(e,r,b,p,{type:"next_step_run_again"})}async function sa(n,e,t,r,s,a,i){var O,R,q,X;const u=t;let l=s.newItems;const[c,p]=await Promise.all([aa(n,s.functions,a,i),Pu(n,s.computerActions,a,i._context)]);if(l=l.concat(c.map(F=>F.runItem)),l=l.concat(p),s.mcpApprovalRequests.length>0)for(const F of s.mcpApprovalRequests){const V=F.mcpTool.providerData,Q=F.requestItem.rawItem.providerData;if(V.on_approval){const ee=await V.on_approval(i._context,F.requestItem),ve={approve:ee.approve,approval_request_id:Q.id,reason:ee.reason};l.push(new lt({type:"hosted_tool_call",name:"mcp_approval_response",providerData:ve},n))}else{l.push(F.requestItem);const ee={type:"hosted_mcp_tool_approval",tool:F.mcpTool,runItem:new be({type:"hosted_tool_call",name:Q.name,id:Q.id,arguments:Q.arguments,status:"in_progress",providerData:Q},n)};c.push(ee)}}if(s.handoffs.length>0)return await Mu(n,e,u,l,r,s.handoffs,a,i._context);const f=await ia(n,c,i);if(f.isFinalOutput)return a.emit("agent_end",i._context,n,f.finalOutput),n.emit("agent_end",i._context,f.finalOutput),new xe(e,r,u,l,{type:"next_step_final_output",output:f.finalOutput});if(f.isInterrupted)return new xe(e,r,u,l,{type:"next_step_interruption",data:{interruptions:f.interruptions}});if((((O=s.functions)==null?void 0:O.length)??0)>0||(((R=s.computerActions)==null?void 0:R.length)??0)>0||(((q=s.mcpApprovalRequests)==null?void 0:q.length)??0)>0||(((X=s.handoffs)==null?void 0:X.length)??0)>0)return new xe(e,r,u,l,{type:"next_step_run_again"});const b=l.filter(F=>F instanceof Hn),y=b.length>0?Us(b[b.length-1].rawItem):void 0;if(typeof y>"u")return new xe(e,r,u,l,{type:"next_step_run_again"});if(!c.some(F=>F.runItem instanceof be)){if(n.outputType==="text")return new xe(e,r,u,l,{type:"next_step_final_output",output:y});if(n.outputType!=="text"&&y){const{parser:F}=vr(n.outputType,"final_output"),[V]=await te(()=>F(y));if(V)throw Et({message:"Invalid output type",data:{error:String(V)}}),new me("Invalid output type");return new xe(e,r,u,l,{type:"next_step_final_output",output:y})}}return new xe(e,r,u,l,{type:"next_step_run_again"})}function Yn(n,e){return{type:"function_call_result",name:n.name,callId:n.callId,status:"completed",output:{type:"text",text:ze(e)}}}async function aa(n,e,t,r){async function s(a){let i=a.toolCall.arguments;if(a.tool.parameters&&(ot(a.tool.parameters)?i=a.tool.parameters.parse(i):i=JSON.parse(i)),await a.tool.needsApproval(r._context,i,a.toolCall.callId)){const l=r._context.isToolApproved({toolName:a.tool.name,callId:a.toolCall.callId});if(l===!1)return Qs(async c=>{const p="Tool execution was not approved.";return c.setError({message:p,data:{tool_name:a.tool.name,error:`Tool execution for ${a.toolCall.callId} was manually rejected by user.`}}),c.spanData.output=p,{type:"function_output",tool:a.tool,output:p,runItem:new Ct(Yn(a.toolCall,p),n,p)}},{data:{name:a.tool.name}});if(l!==!0)return{type:"function_approval",tool:a.tool,runItem:new be(a.toolCall,n)}}return Qs(async l=>{t.config.traceIncludeSensitiveData&&(l.spanData.input=a.toolCall.arguments);try{t.emit("agent_tool_start",r._context,n,a.tool,{toolCall:a.toolCall}),n.emit("agent_tool_start",r._context,a.tool,{toolCall:a.toolCall});const c=await a.tool.invoke(r._context,a.toolCall.arguments,{toolCall:a.toolCall}),p=ze(c);t.emit("agent_tool_end",r._context,n,a.tool,p,{toolCall:a.toolCall}),n.emit("agent_tool_end",r._context,a.tool,p,{toolCall:a.toolCall}),t.config.traceIncludeSensitiveData&&(l.spanData.output=p);const f={type:"function_output",tool:a.tool,output:c,runItem:new Ct(Yn(a.toolCall,c),n,c)},h=nu(a.toolCall);if(h){f.agentRunResult=h;const b=h.interruptions;b.length>0&&(f.interruptions=b)}return f}catch(c){throw l.setError({message:"Error running tool",data:{tool_name:a.tool.name,error:String(c)}}),c}},{data:{name:a.tool.name}})}try{return await Promise.all(e.map(s))}catch(a){throw new ko(`Failed to run function tools: ${a}`,a,r)}}async function Du(n,e){const t=e.action;let r;switch(t.type){case"click":await n.click(t.x,t.y,t.button);break;case"double_click":await n.doubleClick(t.x,t.y);break;case"drag":await n.drag(t.path.map(s=>[s.x,s.y]));break;case"keypress":await n.keypress(t.keys);break;case"move":await n.move(t.x,t.y);break;case"screenshot":r=await n.screenshot();break;case"scroll":await n.scroll(t.x,t.y,t.scroll_x,t.scroll_y);break;case"type":await n.type(t.text);break;case"wait":await n.wait();break}if(typeof r<"u"||typeof n.screenshot=="function"&&(r=await n.screenshot(),typeof r<"u"))return r;throw new Error("Computer does not implement screenshot()")}async function Pu(n,e,t,r,s=void 0){const a=s??E,i=[];for(const u of e){const l=u.computer.computer,c=u.toolCall;t.emit("agent_tool_start",r,n,u.computer,{toolCall:c}),typeof n.emit=="function"&&n.emit("agent_tool_start",r,u.computer,{toolCall:c});let p;try{p=await Du(l,c)}catch(b){a.error("Failed to execute computer action:",b),p=""}t.emit("agent_tool_end",r,n,u.computer,p,{toolCall:c}),typeof n.emit=="function"&&n.emit("agent_tool_end",r,u.computer,p,{toolCall:c});const f=p?`data:image/png;base64,${p}`:"",h={type:"computer_call_result",callId:c.callId,output:{type:"computer_screenshot",data:f}};i.push(new Ct(h,n,f))}return i}async function Mu(n,e,t,r,s,a,i,u){if(r=[...r],a.length===0)return E.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."),new xe(e,s,t,r,{type:"next_step_run_again"});if(a.length>1){const c="Multiple handoffs detected, ignoring this one.";for(let p=1;p<a.length;p++)r.push(new Ct(Yn(a[p].toolCall,c),n,c))}const l=a[0];return Tu(async c=>{const p=l.handoff,f=await p.onInvokeHandoff(u,l.toolCall.arguments);if(c.spanData.to_agent=f.name,a.length>1){const b=a.map(y=>y.handoff.agentName);c.setError({message:"Multiple handoffs requested",data:{requested_agents:b}})}r.push(new Dr(Yn(l.toolCall,Fs(f)),n,f)),i.emit("agent_handoff",u,n,f),n.emit("agent_handoff",u,f);const h=p.inputFilter??i.config.handoffInputFilter;if(h){E.debug("Filtering inputs for handoff"),typeof h!="function"&&c.setError({message:"Invalid input filter",data:{details:"not callable"}});const b={inputHistory:Array.isArray(e)?[...e]:e,preHandoffItems:[...t],newItems:[...r],runContext:u},y=h(b);e=y.inputHistory,t=y.preHandoffItems,r=y.newItems}return new xe(e,s,t,r,{type:"next_step_handoff",newAgent:f})},{data:{from_agent:n.name}})}const Xn={isFinalOutput:!1,isInterrupted:void 0};async function ia(n,e,t){if(e.length===0)return Xn;const r=[];for(const i of e)if(i.runItem instanceof be&&r.push(i.runItem),i.type==="function_output"){if(Array.isArray(i.interruptions))r.push(...i.interruptions);else if(i.agentRunResult){const u=i.agentRunResult.interruptions;u.length>0&&r.push(...u)}}if(r.length>0)return{isFinalOutput:!1,isInterrupted:!0,interruptions:r};if(n.toolUseBehavior==="run_llm_again")return Xn;const s=e[0];if(n.toolUseBehavior==="stop_on_first_tool")return(s==null?void 0:s.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:ze(s.output)}:Xn;const a=n.toolUseBehavior;if(typeof a=="object"){const i=e.find(u=>a.stopAtToolNames.includes(u.tool.name));return(i==null?void 0:i.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:ze(i.output)}:Xn}if(typeof a=="function")return a(t._context,e);throw new se(`Invalid toolUseBehavior: ${a}`,t)}function ju(n){if(n instanceof Hn)return"message_output_created";if(n instanceof Nr)return"handoff_requested";if(n instanceof Dr)return"handoff_occurred";if(n instanceof lt)return"tool_called";if(n instanceof Ct)return"tool_output";if(n instanceof Rr)return"reasoning_item_created";if(n instanceof be)return"tool_approval_requested"}function oa(n,e){const t=ju(e);if(!t){E.warn("Unknown item type: ",e);return}n._addItem(new Ou(t,e))}function $u(n,e){for(const t of e)oa(n,t)}function ua(n,e,t){const r=t==null?void 0:t.skipItems;for(const s of e.newStepItems)r!=null&&r.has(s)||oa(n,s)}class ca{constructor(){I(this,Dt,new Map)}addToolUse(e,t){o(this,Dt).set(e,t)}hasUsedTools(e){return o(this,Dt).has(e)}toJSON(){return Object.fromEntries(Array.from(o(this,Dt).entries()).map(([e,t])=>[e.name,t]))}}Dt=new WeakMap;const Qn="1.0",Fu=g(Qn),Re=m({name:d()}),da=m({object:g("trace.span"),id:d(),trace_id:d(),parent_id:d().nullable(),started_at:d().nullable(),ended_at:d().nullable(),error:m({message:d(),data:re(d(),U()).optional()}).nullable(),span_data:re(d(),U())}).extend({previous_span:Fi(()=>da).optional()}),la=m({requests:A(),inputTokens:A(),outputTokens:A(),totalTokens:A()}),pa=m({usage:la,output:B(Or),responseId:d().optional(),providerData:re(d(),U()).optional()}),fa=he("type",[m({type:g("message_output_item"),rawItem:Vn,agent:Re}),m({type:g("tool_call_item"),rawItem:yu.or(Kt),agent:Re}),m({type:g("tool_call_output_item"),rawItem:Ar,agent:Re,output:d()}),m({type:g("reasoning_item"),rawItem:Er,agent:Re}),m({type:g("handoff_call_item"),rawItem:Yt,agent:Re}),m({type:g("handoff_output_item"),rawItem:Ar,sourceAgent:Re,targetAgent:Re}),m({type:g("tool_approval_item"),rawItem:Yt.or(Kt),agent:Re})]),Lu=m({object:g("trace"),id:d(),workflow_name:d(),group_id:d().nullable(),metadata:re(d(),U())}),Zu=m({newItems:B(fa),toolsUsed:B(d()),handoffs:B(m({toolCall:U(),handoff:U()})),functions:B(m({toolCall:U(),tool:U()})),computerActions:B(m({toolCall:U(),computer:U()})),mcpApprovalRequests:B(m({requestItem:m({rawItem:m({type:g("hosted_tool_call"),name:d(),arguments:d().optional(),status:d().optional(),output:d().optional(),providerData:re(d(),U()).nullable().optional()})}),mcpTool:m({type:g("hosted_tool"),name:g("hosted_mcp"),providerData:re(d(),U())})})).optional()}),ha=m({tripwireTriggered:at(),outputInfo:U()}),Uu=m({guardrail:m({type:g("input"),name:d()}),output:ha}),qu=m({guardrail:m({type:g("output"),name:d()}),agentOutput:U(),agent:Re,output:ha}),ma=m({$schemaVersion:Fu,currentTurn:A(),currentAgent:Re,originalInput:d().or(B(vu)),modelResponses:B(pa),context:m({usage:la,approvals:re(d(),m({approved:B(d()).or(at()),rejected:B(d()).or(at())})),context:re(d(),U())}),toolUseTracker:re(d(),B(d())),maxTurns:A(),currentAgentSpan:da.nullable().optional(),noActiveAgentRun:at(),inputGuardrailResults:B(Uu),outputGuardrailResults:B(qu),currentStep:Nu.optional(),lastModelResponse:pa.optional(),generatedItems:B(fa),lastProcessedResponse:Zu.optional(),trace:Lu.nullable()});class pt{constructor(e,t,r,s){_(this,"_currentTurn",0);_(this,"_currentAgent");_(this,"_originalInput");_(this,"_modelResponses");_(this,"_currentAgentSpan");_(this,"_context");_(this,"_toolUseTracker");_(this,"_generatedItems");_(this,"_maxTurns");_(this,"_noActiveAgentRun",!0);_(this,"_lastTurnResponse");_(this,"_inputGuardrailResults");_(this,"_outputGuardrailResults");_(this,"_currentStep");_(this,"_lastProcessedResponse");_(this,"_trace",null);this._context=e,this._originalInput=structuredClone(t),this._modelResponses=[],this._currentAgentSpan=void 0,this._currentAgent=r,this._toolUseTracker=new ca,this._generatedItems=[],this._maxTurns=s,this._inputGuardrailResults=[],this._outputGuardrailResults=[],this._trace=Qt()}get history(){return Xt(this._originalInput,this._generatedItems)}getInterruptions(){var e;return((e=this._currentStep)==null?void 0:e.type)!=="next_step_interruption"?[]:this._currentStep.data.interruptions}approve(e,t={alwaysApprove:!1}){this._context.approveTool(e,t)}reject(e,t={alwaysReject:!1}){this._context.rejectTool(e,t)}toJSON(){var r;const e={$schemaVersion:Qn,currentTurn:this._currentTurn,currentAgent:{name:this._currentAgent.name},originalInput:this._originalInput,modelResponses:this._modelResponses.map(s=>({usage:{requests:s.usage.requests,inputTokens:s.usage.inputTokens,outputTokens:s.usage.outputTokens,totalTokens:s.usage.totalTokens},output:s.output,responseId:s.responseId,providerData:s.providerData})),context:this._context.toJSON(),toolUseTracker:this._toolUseTracker.toJSON(),maxTurns:this._maxTurns,currentAgentSpan:(r=this._currentAgentSpan)==null?void 0:r.toJSON(),noActiveAgentRun:this._noActiveAgentRun,inputGuardrailResults:this._inputGuardrailResults,outputGuardrailResults:this._outputGuardrailResults.map(s=>({...s,agent:s.agent.toJSON()})),currentStep:this._currentStep,lastModelResponse:this._lastTurnResponse,generatedItems:this._generatedItems.map(s=>s.toJSON()),lastProcessedResponse:this._lastProcessedResponse,trace:this._trace?this._trace.toJSON():null},t=ma.safeParse(e);if(!t.success)throw new To(`Failed to serialize run state. ${t.error.message}`);return t.data}toString(){return JSON.stringify(this.toJSON())}static async fromString(e,t){var f,h,b,y,w;const[r,s]=await te(()=>JSON.parse(t));if(r)throw new se(`Failed to parse run state. ${r instanceof Error?r.message:String(r)}`);const a=s.$schemaVersion;if(!a)throw new se("Run state is missing schema version");if(a!==Qn)throw new se(`Run state schema version ${a} is not supported. Please use version ${Qn}`);const i=ma.parse(JSON.parse(t)),u=Ju(e),l=new At(i.context.context);l._rebuildApprovals(i.context.approvals);const c=u.get(i.currentAgent.name);if(!c)throw new se(`Agent ${i.currentAgent.name} not found`);const p=new pt(l,"",c,i.maxTurns);p._currentTurn=i.currentTurn,p._toolUseTracker=new ca;for(const[O,R]of Object.entries(i.toolUseTracker))p._toolUseTracker.addToolUse(u.get(O),R);if(i.currentAgentSpan){i.trace||E.warn("Trace is not set, skipping tracing setup");const O=De().createTrace({traceId:(f=i.trace)==null?void 0:f.id,name:(h=i.trace)==null?void 0:h.workflow_name,groupId:((b=i.trace)==null?void 0:b.group_id)??void 0,metadata:(y=i.trace)==null?void 0:y.metadata});p._currentAgentSpan=ga(O,i.currentAgentSpan),p._trace=O}return p._noActiveAgentRun=i.noActiveAgentRun,p._inputGuardrailResults=i.inputGuardrailResults,p._outputGuardrailResults=i.outputGuardrailResults.map(O=>({...O,agent:u.get(O.agent.name)})),p._currentStep=i.currentStep,p._originalInput=i.originalInput,p._modelResponses=i.modelResponses.map(_a),p._lastTurnResponse=i.lastModelResponse?_a(i.lastModelResponse):void 0,p._generatedItems=i.generatedItems.map(O=>ya(O,u)),p._lastProcessedResponse=i.lastProcessedResponse?await Bu(u,p._currentAgent,p._context,i.lastProcessedResponse):void 0,((w=i.currentStep)==null?void 0:w.type)==="next_step_handoff"&&(p._currentStep={type:"next_step_handoff",newAgent:u.get(i.currentStep.newAgent.name)}),p}}function Ju(n){const e=new Map,t=[n];for(;t.length>0;){const r=t.shift();if(!e.has(r.name)){e.set(r.name,r);for(const s of r.handoffs)s instanceof ut?e.has(s.name)||t.push(s):s.agent&&(e.has(s.agent.name)||t.push(s.agent))}}return e}function ga(n,e){const t=e.span_data,r=e.previous_span?ga(n,e.previous_span):void 0,s=De().createSpan({spanId:e.id,traceId:e.trace_id,parentId:e.parent_id??void 0,startedAt:e.started_at??void 0,endedAt:e.ended_at??void 0,data:t},n);return s.previousSpan=r,s}function _a(n){const e=new Wn;return e.requests=n.usage.requests,e.inputTokens=n.usage.inputTokens,e.outputTokens=n.usage.outputTokens,e.totalTokens=n.usage.totalTokens,{usage:e,output:n.output.map(t=>Or.parse(t)),responseId:n.responseId,providerData:n.providerData}}function ya(n,e){switch(n.type){case"message_output_item":return new Hn(n.rawItem,e.get(n.agent.name));case"tool_call_item":return new lt(n.rawItem,e.get(n.agent.name));case"tool_call_output_item":return new Ct(n.rawItem,e.get(n.agent.name),n.output);case"reasoning_item":return new Rr(n.rawItem,e.get(n.agent.name));case"handoff_call_item":return new Nr(n.rawItem,e.get(n.agent.name));case"handoff_output_item":return new Dr(n.rawItem,e.get(n.sourceAgent.name),e.get(n.targetAgent.name));case"tool_approval_item":return new be(n.rawItem,e.get(n.agent.name))}}async function Bu(n,e,t,r){const s=await e.getAllTools(t),a=new Map(s.filter(c=>c.type==="function").map(c=>[c.name,c])),i=new Map(s.filter(c=>c.type==="computer").map(c=>[c.name,c])),u=new Map(e.handoffs.map(c=>c instanceof ut?[c.name,Zs(c)]:[c.toolName,c])),l={newItems:r.newItems.map(c=>ya(c,n)),toolsUsed:r.toolsUsed,handoffs:r.handoffs.map(c=>{if(!u.has(c.handoff.toolName))throw new se(`Handoff ${c.handoff.toolName} not found`);return{toolCall:c.toolCall,handoff:u.get(c.handoff.toolName)}}),functions:await Promise.all(r.functions.map(async c=>{if(!a.has(c.tool.name))throw new se(`Tool ${c.tool.name} not found`);return{toolCall:c.toolCall,tool:a.get(c.tool.name)}})),computerActions:r.computerActions.map(c=>{const p=c.computer.name;if(!i.has(p))throw new se(`Computer tool ${p} not found`);return{toolCall:c.toolCall,computer:i.get(p)}}),mcpApprovalRequests:(r.mcpApprovalRequests??[]).map(c=>({requestItem:new be(c.requestItem.rawItem,e),mcpTool:c.mcpTool}))};return{...l,hasToolsOrApprovalsToRun(){return l.handoffs.length>0||l.functions.length>0||l.mcpApprovalRequests.length>0||l.computerActions.length>0}}}const va=10;function wa(n,e){return n?!1:e?!0:"enabled_without_data"}function Pr(n){return typeof n=="string"?[{type:"message",role:"user",content:n}]:[...n]}class ba{constructor({conversationId:e,previousResponseId:t}){_(this,"conversationId");_(this,"previousResponseId");_(this,"sentInitialInput",!1);_(this,"sentItems",new WeakSet);_(this,"serverItems",new WeakSet);this.conversationId=e??void 0,this.previousResponseId=t??void 0}primeFromState({originalInput:e,generatedItems:t,modelResponses:r}){if(this.sentInitialInput)return;for(const a of Pr(e))a&&typeof a=="object"&&this.sentItems.add(a);this.sentInitialInput=!0;const s=r[r.length-1];for(const a of r)for(const i of a.output)i&&typeof i=="object"&&this.serverItems.add(i);!this.conversationId&&(s!=null&&s.responseId)&&(this.previousResponseId=s.responseId);for(const a of t){const i=a.rawItem;!i||typeof i!="object"||this.serverItems.has(i)&&this.sentItems.add(i)}}trackServerItems(e){if(e){for(const t of e.output)t&&typeof t=="object"&&this.serverItems.add(t);!this.conversationId&&this.previousResponseId!==void 0&&e.responseId&&(this.previousResponseId=e.responseId)}}prepareInput(e,t){const r=[];if(!this.sentInitialInput){const s=Pr(e);for(const a of s)r.push(a),a&&typeof a=="object"&&this.sentItems.add(a);this.sentInitialInput=!0}for(const s of t){if(s.type==="tool_approval_item")continue;const a=s.rawItem;!a||typeof a!="object"||this.sentItems.has(a)||this.serverItems.has(a)||(r.push(a),this.sentItems.add(a))}return r}}function Xt(n,e){const t=e.filter(r=>r.type!=="tool_approval_item").map(r=>r.rawItem);return[...Pr(n),...t]}class Gu extends Wo{constructor(t={}){super();I(this,ce);_(this,"config");_(this,"inputGuardrailDefs");_(this,"outputGuardrailDefs");this.config={modelProvider:t.modelProvider??su(),model:t.model,modelSettings:t.modelSettings,handoffInputFilter:t.handoffInputFilter,inputGuardrails:t.inputGuardrails,outputGuardrails:t.outputGuardrails,tracingDisabled:t.tracingDisabled??!1,traceIncludeSensitiveData:t.traceIncludeSensitiveData??!0,workflowName:t.workflowName??"Agent workflow",traceId:t.traceId,groupId:t.groupId,traceMetadata:t.traceMetadata},this.inputGuardrailDefs=(t.inputGuardrails??[]).map(qs),this.outputGuardrailDefs=(t.outputGuardrails??[]).map(Tr)}run(t,r,s={stream:!1,context:void 0}){return r instanceof pt&&r._trace?zu(r._trace,async()=>(r._currentAgentSpan&&er(r._currentAgentSpan),s!=null&&s.stream?L(this,ce,Hr).call(this,t,r,s):L(this,ce,zr).call(this,t,r,s))):Vu(async()=>s!=null&&s.stream?L(this,ce,Hr).call(this,t,r,s):L(this,ce,zr).call(this,t,r,s),{traceId:this.config.traceId,name:this.config.workflowName,groupId:this.config.groupId,metadata:this.config.traceMetadata})}}ce=new WeakSet,zr=async function(t,r,s){return jr(async()=>{var l,c;const a=r instanceof pt,i=a?r:new pt(s.context instanceof At?s.context:new At(s.context),r,t,s.maxTurns??va),u=s.conversationId||s.previousResponseId?new ba({conversationId:s.conversationId,previousResponseId:s.previousResponseId}):void 0;u&&a&&u.primeFromState({originalInput:i._originalInput,generatedItems:i._generatedItems,modelResponses:i._modelResponses});try{for(;;){const p=i._currentAgent.model!==void 0&&i._currentAgent.model!==""||this.config.model!==void 0&&this.config.model!=="";let f=xa(i._currentAgent.model,this.config.model);if(typeof f=="string"&&(f=await this.config.modelProvider.getModel(f)),i._currentStep=i._currentStep??{type:"next_step_run_again"},i._currentStep.type==="next_step_interruption"){if(E.debug("Continuing from interruption"),!i._lastTurnResponse||!i._lastProcessedResponse)throw new se("No model response found in previous state",i);const h=await ra(i._currentAgent,i._originalInput,i._generatedItems,i._lastTurnResponse,i._lastProcessedResponse,this,i);if(i._toolUseTracker.addToolUse(i._currentAgent,i._lastProcessedResponse.toolsUsed),i._originalInput=h.originalInput,i._generatedItems=h.generatedItems,i._currentStep=h.nextStep,h.nextStep.type==="next_step_interruption")return new Mr(i);continue}if(i._currentStep.type==="next_step_run_again"){const h=await i._currentAgent.getEnabledHandoffs(i._context);if(!i._currentAgentSpan){const ee=h.map(ve=>ve.agentName);i._currentAgentSpan=Xs({data:{name:i._currentAgent.name,handoffs:ee,output_type:i._currentAgent.outputSchemaName}}),i._currentAgentSpan.start(),er(i._currentAgentSpan)}const b=await i._currentAgent.getAllTools(i._context),y=b.map(ee=>Ks(ee)),w=h.map(ee=>Ys(ee));if(i._currentAgentSpan&&(i._currentAgentSpan.spanData.tools=b.map(ee=>ee.name)),i._currentTurn++,i._currentTurn>i._maxTurns)throw(l=i._currentAgentSpan)==null||l.setError({message:"Max turns exceeded",data:{max_turns:i._maxTurns}}),new xs(`Max turns (${i._maxTurns}) exceeded`,i);E.debug(`Running agent ${i._currentAgent.name} (turn ${i._currentTurn})`),i._currentTurn===1&&await L(this,ce,Vr).call(this,i);const O=u?u.prepareInput(i._originalInput,i._generatedItems):Xt(i._originalInput,i._generatedItems);i._noActiveAgentRun&&(i._currentAgent.emit("agent_start",i._context,i._currentAgent),this.emit("agent_start",i._context,i._currentAgent));let R={...this.config.modelSettings,...i._currentAgent.modelSettings};const q=i._currentAgent.modelSettings;R=Sa(p,q,f,R),R=na(i._currentAgent,i._toolUseTracker,R);const X=(u==null?void 0:u.previousResponseId)??s.previousResponseId,F=(u==null?void 0:u.conversationId)??s.conversationId;i._lastTurnResponse=await f.getResponse({systemInstructions:await i._currentAgent.getSystemPrompt(i._context),prompt:await i._currentAgent.getPrompt(i._context),...p?{overridePromptModel:!0}:{},input:O,previousResponseId:X,conversationId:F,modelSettings:R,tools:y,outputType:Ts(i._currentAgent.outputType),handoffs:w,tracing:wa(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:s.signal}),i._modelResponses.push(i._lastTurnResponse),i._context.usage.add(i._lastTurnResponse.usage),i._noActiveAgentRun=!1,u==null||u.trackServerItems(i._lastTurnResponse);const V=ta(i._lastTurnResponse,i._currentAgent,b,h);i._lastProcessedResponse=V;const Q=await sa(i._currentAgent,i._originalInput,i._generatedItems,i._lastTurnResponse,i._lastProcessedResponse,this,i);i._toolUseTracker.addToolUse(i._currentAgent,i._lastProcessedResponse.toolsUsed),i._originalInput=Q.originalInput,i._generatedItems=Q.generatedItems,i._currentStep=Q.nextStep}if(i._currentStep&&i._currentStep.type==="next_step_final_output")return await L(this,ce,Wr).call(this,i,i._currentStep.output),this.emit("agent_end",i._context,i._currentAgent,i._currentStep.output),i._currentAgent.emit("agent_end",i._context,i._currentStep.output),new Mr(i);if(i._currentStep&&i._currentStep.type==="next_step_handoff")i._currentAgent=i._currentStep.newAgent,i._currentAgentSpan&&(i._currentAgentSpan.end(),tn(),i._currentAgentSpan=void 0),i._noActiveAgentRun=!0,i._currentStep={type:"next_step_run_again"};else{if(i._currentStep&&i._currentStep.type==="next_step_interruption")return new Mr(i);E.debug("Running next loop")}}}catch(p){throw i._currentAgentSpan&&i._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(p)}}),p}finally{i._currentAgentSpan&&(((c=i._currentStep)==null?void 0:c.type)!=="next_step_interruption"&&i._currentAgentSpan.end(),tn())}})},Vr=async function(t){const r=this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map(qs));if(r.length>0){const s={agent:t._currentAgent,input:t._originalInput,context:t._context};try{const a=await Promise.all(r.map(async i=>ea(async u=>{const l=await i.run(s);return u.spanData.triggered=l.output.tripwireTriggered,l},{data:{name:i.name}},t._currentAgentSpan)));for(const i of a)if(i.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:i.guardrail.name}}),new Is(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`,i,t)}catch(a){throw a instanceof Is?a:(t._currentTurn--,new Ss(`Input guardrail failed to complete: ${a}`,a,t))}}},Wr=async function(t,r){const s=this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(Tr));if(s.length>0){const a=t._currentAgent.processFinalOutput(r),i={agent:t._currentAgent,agentOutput:a,context:t._context,details:{modelResponse:t._lastTurnResponse}};try{const u=await Promise.all(s.map(async l=>ea(async c=>{const p=await l.run(i);return c.spanData.triggered=p.output.tripwireTriggered,p},{data:{name:l.name}},t._currentAgentSpan)));for(const l of u)if(l.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:l.guardrail.name}}),new Un(`Output guardrail triggered: ${JSON.stringify(l.output.outputInfo)}`,l,t)}catch(u){throw u instanceof Un?u:new Ss(`Output guardrail failed to complete: ${u}`,u,t)}}},ri=async function(t,r,s){var i,u,l;const a=r.conversationId||r.previousResponseId?new ba({conversationId:r.conversationId,previousResponseId:r.previousResponseId}):void 0;a&&s&&a.primeFromState({originalInput:t.state._originalInput,generatedItems:t.state._generatedItems,modelResponses:t.state._modelResponses});try{for(;;){const c=t.state._currentAgent,p=await c.getEnabledHandoffs(t.state._context),f=await c.getAllTools(t.state._context),h=f.map(y=>Ks(y)),b=p.map(y=>Ys(y));if(t.state._currentStep=t.state._currentStep??{type:"next_step_run_again"},t.state._currentStep.type==="next_step_interruption"){if(E.debug("Continuing from interruption"),!t.state._lastTurnResponse||!t.state._lastProcessedResponse)throw new se("No model response found in previous state",t.state);const y=await ra(t.state._currentAgent,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);if(ua(t,y),t.state._toolUseTracker.addToolUse(t.state._currentAgent,t.state._lastProcessedResponse.toolsUsed),t.state._originalInput=y.originalInput,t.state._generatedItems=y.generatedItems,t.state._currentStep=y.nextStep,y.nextStep.type==="next_step_interruption")return;continue}if(t.state._currentStep.type==="next_step_run_again"){if(!t.state._currentAgentSpan){const Ce=p.map(Ie=>Ie.agentName);t.state._currentAgentSpan=Xs({data:{name:c.name,handoffs:Ce,tools:f.map(Ie=>Ie.name),output_type:c.outputSchemaName}}),t.state._currentAgentSpan.start(),er(t.state._currentAgentSpan)}if(t.state._currentTurn++,t.state._currentTurn>t.state._maxTurns)throw(i=t.state._currentAgentSpan)==null||i.setError({message:"Max turns exceeded",data:{max_turns:t.state._maxTurns}}),new xs(`Max turns (${t.state._maxTurns}) exceeded`,t.state);E.debug(`Running agent ${c.name} (turn ${t.state._currentTurn})`);const y=c.model!==void 0&&c.model!==""||this.config.model!==void 0&&this.config.model!=="";let w=xa(c.model,this.config.model);typeof w=="string"&&(w=await this.config.modelProvider.getModel(w)),t.state._currentTurn===1&&await L(this,ce,Vr).call(this,t.state);let O={...this.config.modelSettings,...c.modelSettings};const R=c.modelSettings;O=Sa(y,R,w,O),O=na(c,t.state._toolUseTracker,O);const q=a?a.prepareInput(t.input,t.newItems):Xt(t.input,t.newItems);t.state._noActiveAgentRun&&(c.emit("agent_start",t.state._context,c),this.emit("agent_start",t.state._context,c));let X;const F=(a==null?void 0:a.previousResponseId)??r.previousResponseId,V=(a==null?void 0:a.conversationId)??r.conversationId;for await(const Ce of w.getStreamedResponse({systemInstructions:await c.getSystemPrompt(t.state._context),prompt:await c.getPrompt(t.state._context),...y?{overridePromptModel:!0}:{},input:q,previousResponseId:F,conversationId:V,modelSettings:O,tools:h,handoffs:b,outputType:Ts(c.outputType),tracing:wa(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:r.signal})){if(Ce.type==="response_done"){const Ie=Hs.parse(Ce);X={usage:new Wn(Ie.response.usage),output:Ie.response.output,responseId:Ie.response.id}}if(t.cancelled)return;t._addItem(new Eu(Ce))}if(t.state._noActiveAgentRun=!1,!X)throw new me("Model did not produce a final response!",t.state);t.state._lastTurnResponse=X,a==null||a.trackServerItems(X),t.state._modelResponses.push(t.state._lastTurnResponse);const Q=ta(t.state._lastTurnResponse,c,f,p);t.state._lastProcessedResponse=Q;const ee=new Set(Q.newItems);ee.size>0&&$u(t,Q.newItems);const ve=await sa(c,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);ua(t,ve,{skipItems:ee}),t.state._toolUseTracker.addToolUse(c,Q.toolsUsed),t.state._originalInput=ve.originalInput,t.state._generatedItems=ve.generatedItems,t.state._currentStep=ve.nextStep}if(t.state._currentStep.type==="next_step_final_output"){await L(this,ce,Wr).call(this,t.state,t.state._currentStep.output),this.emit("agent_end",t.state._context,c,t.state._currentStep.output),c.emit("agent_end",t.state._context,t.state._currentStep.output);return}else{if(t.state._currentStep.type==="next_step_interruption")return;t.state._currentStep.type==="next_step_handoff"?(t.state._currentAgent=(u=t.state._currentStep)==null?void 0:u.newAgent,t.state._currentAgentSpan&&(t.state._currentAgentSpan.end(),tn()),t.state._currentAgentSpan=void 0,t._addItem(new Ru(t.state._currentAgent)),t.state._noActiveAgentRun=!0,t.state._currentStep={type:"next_step_run_again"}):E.debug("Running next loop")}}}catch(c){throw t.state._currentAgentSpan&&t.state._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(c)}}),c}finally{t.state._currentAgentSpan&&(((l=t.state._currentStep)==null?void 0:l.type)!=="next_step_interruption"&&t.state._currentAgentSpan.end(),tn())}},Hr=async function(t,r,s){return s=s??{},jr(async()=>{const a=r instanceof pt,i=a?r:new pt(s.context instanceof At?s.context:new At(s.context),r,t,s.maxTurns??va),u=new Ta({signal:s.signal,state:i});u.maxTurns=s.maxTurns??i._maxTurns;const l=L(this,ce,ri).call(this,u,s,a).then(()=>{u._done()},c=>{u._raiseError(c)});return u._setStreamLoopPromise(l),u})};function xa(n,e){return typeof n=="string"&&n!==ut.DEFAULT_MODEL_PLACEHOLDER||n?n:e??n??ut.DEFAULT_MODEL_PLACEHOLDER}function Sa(n,e,t,r){var s,a,i,u,l,c,p,f;if(js()&&n&&(typeof t!="string"||!zn(t))&&((s=e.providerData)!=null&&s.reasoning||(i=(a=e.providerData)==null?void 0:a.text)!=null&&i.verbosity||(u=e.providerData)!=null&&u.reasoning_effort)){const h={...r};return(l=h.providerData)==null||delete l.reasoning,(p=(c=h.providerData)==null?void 0:c.text)==null||delete p.verbosity,(f=h.providerData)==null||delete f.reasoning_effort,h.reasoning&&(delete h.reasoning.effort,delete h.reasoning.summary),h.text&&delete h.text.verbosity,h}return r}class Ia{constructor(e){_(this,"state");this.state=e}get history(){return Xt(this.input,this.newItems)}get output(){return Xt([],this.newItems)}get input(){return this.state._originalInput}get newItems(){return this.state._generatedItems}get rawResponses(){return this.state._modelResponses}get lastResponseId(){const e=this.rawResponses;return e&&e.length>0?e[e.length-1].responseId:void 0}get lastAgent(){return this.state._currentAgent}get inputGuardrailResults(){return this.state._inputGuardrailResults}get outputGuardrailResults(){return this.state._outputGuardrailResults}get interruptions(){var e;return((e=this.state._currentStep)==null?void 0:e.type)==="next_step_interruption"?this.state._currentStep.data.interruptions:[]}get finalOutput(){var e;if(((e=this.state._currentStep)==null?void 0:e.type)==="next_step_final_output")return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);E.warn("Accessed finalOutput before agent run is completed.")}}class Mr extends Ia{constructor(e){super(e)}}class Ta extends Ia{constructor(t={}){super(t.state);_(this,"currentTurn",0);_(this,"maxTurns");I(this,an,null);I(this,We);I(this,_e);I(this,Le);I(this,Pt);I(this,Mt);I(this,on);I(this,mt,!1);I(this,un);if(v(this,We,t.signal),v(this,Le,new qo({start:r=>{v(this,_e,r)},cancel:()=>{v(this,mt,!0)}})),v(this,Pt,new Promise((r,s)=>{v(this,Mt,r),v(this,on,s)})),o(this,We)){const r=()=>{var a,i;if(o(this,mt))return;v(this,mt,!0);const s=o(this,_e);if(v(this,_e,void 0),o(this,Le).locked){if(s)try{s.close()}catch(u){E.debug(`Failed to close readable stream on abort: ${u}`)}}else o(this,Le).cancel((a=o(this,We))==null?void 0:a.reason).catch(u=>{E.debug(`Failed to cancel readable stream on abort: ${u}`)});(i=o(this,Mt))==null||i.call(this)};o(this,We).aborted?r():o(this,We).addEventListener("abort",r,{once:!0})}}get currentAgent(){return this.lastAgent}_addItem(t){var r;this.cancelled||(r=o(this,_e))==null||r.enqueue(t)}_done(){var t;!this.cancelled&&o(this,_e)&&(o(this,_e).close(),v(this,_e,void 0),(t=o(this,Mt))==null||t.call(this))}_raiseError(t){var r;!this.cancelled&&o(this,_e)&&(o(this,_e).error(t),v(this,_e,void 0)),v(this,an,t),(r=o(this,on))==null||r.call(this,t),o(this,Pt).catch(s=>{E.debug(`Resulted in an error: ${s}`)})}get cancelled(){return o(this,mt)}toStream(){return o(this,Le)}get completed(){return o(this,Pt)}get error(){return o(this,an)}toTextStream(t={}){const r=o(this,Le).pipeThrough(new Jo({transform(s,a){if(s.type==="raw_model_stream_event"&&s.data.type==="output_text_delta"){const i=Ws.parse(s.data);a.enqueue(i.delta)}}}));return t.compatibleWithNodeStreams?Uo.fromWeb(r):r}[Symbol.asyncIterator](){return o(this,Le)[Symbol.asyncIterator]()}_setStreamLoopPromise(t){v(this,un,t)}_getStreamLoopPromise(){return o(this,un)}}an=new WeakMap,We=new WeakMap,_e=new WeakMap,Le=new WeakMap,Pt=new WeakMap,Mt=new WeakMap,on=new WeakMap,mt=new WeakMap,un=new WeakMap;let ka;function Ne(){return ka??(ka=new Bo),ka}function Qt(){const n=Ne().getStore();return n!=null&&n.trace?n.trace:null}function en(){const n=Ne().getStore();return n!=null&&n.span?n.span:null}function Aa(n){return async()=>{const e=Qt();if(!e)throw new Error("No trace found");await e.start();const t=await n(e);if(t instanceof Ta){const r=t._getStreamLoopPromise();if(r)return r.finally(()=>e.end()),t}return await e.end(),t}}async function zu(n,e,t={}){const r=typeof n=="string"?De().createTrace({...t,name:n}):n;return Ne().run({trace:r},Aa(e))}async function Vu(n,e={}){if(Qt())return await n();const r=De().createTrace(e);return Ne().run({trace:r},Aa(n))}function er(n){const e=Ne().getStore();if(!e)throw new Error("No existing trace found");e.span&&(e.span.previousSpan=e.previousSpan,e.previousSpan=e.span),e.span=n,Ne().enterWith(e)}function tn(){var e;const n=Ne().getStore();n&&(n.span=n.previousSpan,n.previousSpan=(e=n.previousSpan)==null?void 0:e.previousSpan,Ne().enterWith(n))}function Et(n){const e=en();e&&e.setError(n)}function Wu(n){var e,t,r;return{trace:(e=n.trace)==null?void 0:e.clone(),span:(t=n.span)==null?void 0:t.clone(),previousSpan:(r=n.previousSpan)==null?void 0:r.clone()}}function jr(n){const e=Ne().getStore();if(!e)throw new Error("No existing trace found");const t=Wu(e);return Ne().run(t,n)}class Hu{async export(e){if(Rs.disabled){E.debug("Tracing is disabled. Skipping export");return}for(const t of e)t.type==="trace"?console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}${t.groupId?` groupId=${t.groupId}`:""}`):console.log(`[Exporter] Export span: ${JSON.stringify(t)}`)}}class Ku{constructor(e,{maxQueueSize:t=1e3,maxBatchSize:r=100,scheduleDelay:s=5e3,exportTriggerRatio:a=.8}={}){I(this,pe);I(this,cn);I(this,jt);I(this,dn);I(this,ln);I(this,$t);I(this,de,[]);I(this,Ze);I(this,He,null);I(this,Ke,!1);I(this,Ft,null);v(this,cn,t),v(this,jt,r),v(this,dn,s),v(this,ln,t*a),v(this,$t,e),v(this,Ze,zo),E.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.")}start(){v(this,Ft,new AbortController),L(this,pe,Yr).call(this)}async onTraceStart(e){await L(this,pe,Kr).call(this,e)}async onTraceEnd(e){}async onSpanStart(e){}async onSpanEnd(e){await L(this,pe,Kr).call(this,e)}async shutdown(e){var t;for(e&&o(this,Ze).setTimeout(()=>{var r;(r=o(this,Ft))==null||r.abort()},e),E.debug("Shutting down gracefully");o(this,de).length>0;){if(E.debug(`Waiting for buffer to empty. Items left: ${o(this,de).length}`),o(this,Ke)||await L(this,pe,zt).call(this,!0),(t=o(this,Ft))!=null&&t.signal.aborted){E.debug("Timeout reached, force flushing"),await L(this,pe,zt).call(this,!0);break}await new Promise(r=>o(this,Ze).setTimeout(r,500))}E.debug("Buffer empty. Exiting"),o(this,Ze)&&o(this,He)&&o(this,Ze).clearTimeout(o(this,He))}async forceFlush(){o(this,de).length>0&&await L(this,pe,zt).call(this,!0)}}cn=new WeakMap,jt=new WeakMap,dn=new WeakMap,ln=new WeakMap,$t=new WeakMap,de=new WeakMap,Ze=new WeakMap,He=new WeakMap,Ke=new WeakMap,Ft=new WeakMap,pe=new WeakSet,Kr=async function(e){if(o(this,de).length+1>o(this,cn)){E.error("Dropping trace because buffer is full");return}o(this,de).push(e),o(this,de).length>o(this,ln)&&await L(this,pe,zt).call(this)},Yr=function(){v(this,He,o(this,Ze).setTimeout(async()=>{await L(this,pe,zt).call(this),L(this,pe,Yr).call(this)},o(this,dn))),typeof o(this,He).unref=="function"&&o(this,He).unref()},zt=async function(e=!1){if(o(this,de).length!==0){if(E.debug(`Exporting batches. Force: ${e}. Buffer size: ${o(this,de).length}`),e||o(this,de).length<o(this,jt)){const t=[...o(this,de)];v(this,de,[]),v(this,Ke,!0),await o(this,$t).export(t),v(this,Ke,!1)}else if(o(this,de).length>0){const t=o(this,de).splice(0,o(this,jt));v(this,Ke,!0),await o(this,$t).export(t),v(this,Ke,!1)}}};class Yu{constructor(){I(this,ye,[])}start(){for(const e of o(this,ye))e.start&&e.start()}addTraceProcessor(e){o(this,ye).push(e)}setProcessors(e){E.debug("Shutting down old processors");for(const t of o(this,ye))t.shutdown();v(this,ye,e)}async onTraceStart(e){for(const t of o(this,ye))await t.onTraceStart(e)}async onTraceEnd(e){for(const t of o(this,ye))await t.onTraceEnd(e)}async onSpanStart(e){for(const t of o(this,ye))await t.onSpanStart(e)}async onSpanEnd(e){for(const t of o(this,ye))await t.onSpanEnd(e)}async shutdown(e){for(const t of o(this,ye))await t.shutdown(e)}async forceFlush(){for(const e of o(this,ye))await e.forceFlush()}}ye=new WeakMap;let $r=null,Fr=null;function Xu(){return $r||($r=new Hu),$r}function Ca(){return Fr||(Fr=new Ku(Xu())),Fr}function Ea(){return new Date().toISOString()}function Oa(){return`trace_${Ms().replace(/-/g,"")}`}function Qu(){return`span_${Ms().replace(/-/g,"").slice(0,24)}`}function ec(n){return Object.fromEntries(Object.entries(n).filter(([e])=>!e.startsWith("_")))}const qr=class qr{constructor(e,t){_(this,"type","trace.span");I(this,pn);I(this,fn);I(this,hn);I(this,mn);I(this,gt);I(this,Ye);I(this,Xe);I(this,_t);I(this,gn);v(this,fn,e.traceId),v(this,hn,e.spanId??Qu()),v(this,pn,e.data),v(this,gt,t),v(this,mn,e.parentId??null),v(this,_t,e.error??null),v(this,Ye,e.startedAt??null),v(this,Xe,e.endedAt??null)}get traceId(){return o(this,fn)}get spanData(){return o(this,pn)}get spanId(){return o(this,hn)}get parentId(){return o(this,mn)}get previousSpan(){return o(this,gn)}set previousSpan(e){v(this,gn,e)}start(){if(o(this,Ye)){E.warn("Span already started");return}v(this,Ye,Ea()),o(this,gt).onSpanStart(this)}end(){if(o(this,Xe)){E.debug("Span already finished",this.spanData);return}v(this,Xe,Ea()),o(this,gt).onSpanEnd(this)}setError(e){v(this,_t,e)}get error(){return o(this,_t)}get startedAt(){return o(this,Ye)}get endedAt(){return o(this,Xe)}clone(){var t;const e=new qr({traceId:this.traceId,spanId:this.spanId,parentId:this.parentId??void 0,data:this.spanData,startedAt:o(this,Ye)??void 0,endedAt:o(this,Xe)??void 0,error:o(this,_t)??void 0},o(this,gt));return e.previousSpan=(t=this.previousSpan)==null?void 0:t.clone(),e}toJSON(){return{object:this.type,id:this.spanId,trace_id:this.traceId,parent_id:this.parentId,started_at:this.startedAt,ended_at:this.endedAt,span_data:ec(this.spanData),error:this.error}}};pn=new WeakMap,fn=new WeakMap,hn=new WeakMap,mn=new WeakMap,gt=new WeakMap,Ye=new WeakMap,Xe=new WeakMap,_t=new WeakMap,gn=new WeakMap;let nn=qr;class Ve extends nn{constructor(e,t){super({traceId:"no-op",spanId:"no-op",data:e},t)}start(){}end(){}setError(){}toJSON(){return null}}const Jr=class Jr{constructor(e,t){_(this,"type","trace");_(this,"traceId");_(this,"name");_(this,"groupId",null);_(this,"metadata");I(this,Lt);I(this,Ue);this.traceId=e.traceId??Oa(),this.name=e.name??"Agent workflow",this.groupId=e.groupId??null,this.metadata=e.metadata??{},v(this,Lt,t??Ca()),v(this,Ue,e.started??!1)}async start(){o(this,Ue)||(v(this,Ue,!0),await o(this,Lt).onTraceStart(this))}async end(){o(this,Ue)&&(v(this,Ue,!1),await o(this,Lt).onTraceEnd(this))}clone(){return new Jr({traceId:this.traceId,name:this.name,groupId:this.groupId??void 0,metadata:this.metadata,started:o(this,Ue)})}toJSON(){return{object:this.type,id:this.traceId,workflow_name:this.name,group_id:this.groupId,metadata:this.metadata}}};Lt=new WeakMap,Ue=new WeakMap;let rn=Jr;class Lr extends rn{constructor(){super({})}async start(){}async end(){}toJSON(){return null}}class tc{constructor(){I(this,nr);I(this,ue);I(this,yt);v(this,ue,new Yu),v(this,yt,Rs.disabled),L(this,nr,si).call(this)}registerProcessor(e){o(this,ue).addTraceProcessor(e)}setProcessors(e){o(this,ue).setProcessors(e)}getCurrentTrace(){return Qt()}getCurrentSpan(){return en()}setDisabled(e){v(this,yt,e)}startExportLoop(){o(this,ue).start()}createTrace(e){if(o(this,yt))return E.debug("Tracing is disabled, Not creating trace %o",e),new Lr;const t=e.traceId??Oa(),r=e.name??"Agent workflow";return E.debug("Creating trace %s with name %s",t,r),new rn({...e,name:r,traceId:t},o(this,ue))}createSpan(e,t){if(o(this,yt)||e.disabled)return E.debug("Tracing is disabled, Not creating span %o",e),new Ve(e.data,o(this,ue));let r,s;if(t){if(t instanceof rn){if(t instanceof Lr)return E.debug("Parent trace is no-op, returning NoopSpan"),new Ve(e.data,o(this,ue));s=t.traceId}else if(t instanceof nn){if(t instanceof Ve)return E.debug("Parent span is no-op, returning NoopSpan"),new Ve(e.data,o(this,ue));r=t.spanId,s=t.traceId}}else{const a=Qt(),i=en();if(!a)return E.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Ve(e.data,o(this,ue));if(i instanceof Ve||a instanceof Lr)return E.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`),new Ve(e.data,o(this,ue));s=a.traceId,i?(E.debug("Using parent span %s",i.spanId),r=i.spanId):E.debug("No parent span, using current trace %s",a.traceId)}return s?(E.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId??s}`),new nn({...e,traceId:s,parentId:r},o(this,ue))):(E.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Ve(e.data,o(this,ue)))}async shutdown(e){try{E.debug("Shutting down tracing provider"),await o(this,ue).shutdown(e)}catch(t){E.error("Error shutting down tracing provider %o",t)}}async forceFlush(){await o(this,ue).forceFlush()}}ue=new WeakMap,yt=new WeakMap,nr=new WeakSet,si=function(){if(typeof process<"u"&&typeof process.on=="function"){const e=async()=>{const t=setTimeout(()=>{console.warn("Cleanup timeout, forcing exit"),process.exit(1)},5e3);try{await this.shutdown()}finally{clearTimeout(t)}};process.on("beforeExit",e),process.on("SIGINT",async()=>{await e(),Ra("SIGINT")||process.exit(130)}),process.on("SIGTERM",async()=>{await e(),Ra("SIGTERM")||process.exit(0)}),process.on("unhandledRejection",async(t,r)=>{E.error("Unhandled rejection",t,r),await e(),nc("unhandledRejection")||process.exit(1)})}};function Ra(n){return process.listeners(n).length>1}function nc(n){return process.listeners(n).length>1}let Zr;function De(){return Zr||(Zr=new tc),Zr}function rc(n){De().registerProcessor(n)}rc(Ca());function Na(n){const e=atob(n),t=e.length,r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e.charCodeAt(s);return r.buffer}function Da(n){const e=String.fromCharCode(...new Uint8Array(n));return btoa(e)}function Pa(n){if(typeof n>"u"||n===null||typeof n!="object"||!("type"in n)||typeof n.type!="string"||!n.type||n.type!=="message"||!("content"in n)||!Array.isArray(n.content)||n.content.length<1)return;const e=n.content[n.content.length-1];if(!(!("type"in e)||typeof e.type!="string")){if(e.type==="output_text")return typeof e.text=="string"?e.text:void 0;if(e.type==="output_audio")return typeof e.transcript=="string"?e.transcript:void 0}}function sc(n,e){const t=n.filter(a=>!e.some(i=>i.itemId===a.itemId)),r=e.filter(a=>!n.some(i=>i.itemId===a.itemId)),s=e.filter(a=>n.some(i=>i.itemId===a.itemId&&JSON.stringify(i)!==JSON.stringify(a)));return{removals:t,additions:r,updates:s}}function ac(){return typeof window>"u"?!1:typeof window.RTCPeerConnection<"u"}function Ma(n){return n.role==="system"?n:n.role==="assistant"?{...n,content:n.content.map(e=>e.type==="output_audio"?{...e,audio:null}:e)}:n.role==="user"?{...n,content:n.content.map(e=>e.type==="input_audio"?{...e,audio:null}:e)}:n}function ja(n,e,t){if(e.type==="conversation.item.input_audio_transcription.completed")return n.map(a=>{if(a.itemId===e.item_id&&a.type==="message"&&"role"in a&&a.role==="user"){const i=a.content.map(u=>u.type==="input_audio"?{...u,transcript:e.transcript}:u);return{...a,content:i,status:"completed"}}return a});const r=!t&&e.type==="message"?Ma(e):e,s=n.findIndex(a=>a.itemId===e.itemId);if(s!==-1)return n.map((a,i)=>i===s?r:!t&&a.type==="message"?Ma(a):a);if(e.previousItemId){const a=n.findIndex(i=>i.itemId===e.previousItemId);return a!==-1?[...n.slice(0,a+1),r,...n.slice(a+1)]:[...n,r]}else return[...n,r]}const $a={"User-Agent":`Agents/JavaScript ${z.version}`,"X-OpenAI-Agents-SDK":`openai-agents-sdk.${z.version}`},ic=`openai-agents-sdk.${z.version}`;function oc(n,e){const{name:t,arguments:r,...s}=e;return new be({type:"hosted_tool_call",name:t,arguments:JSON.stringify(r),status:"in_progress",providerData:{...s}},n)}function Fa(n){const{name:e,arguments:t,providerData:r}=n.rawItem,{itemId:s,serverLabel:a,...i}=r??{};if(!s||!a)throw new Error("Invalid approval item for Realtime MCP approval request");return{type:"mcp_approval_request",itemId:s,serverLabel:a,...i,name:e,arguments:t?JSON.parse(t):{},approved:null}}class uc extends ut{constructor(t){super(t);_(this,"voice");this.voice=t.voice}}function cc(n){return{debounceTextLength:n.debounceTextLength??100}}function dc({policyHint:n,...e}){const t=Tr(e),r=n??t.name;return{...t,policyHint:r,run:async s=>{const a=await t.run(s);return{...a,guardrail:{...a.guardrail,policyHint:r}}}}}function lc(n){return`
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo??{})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim()}function ft(n,e){return n in e&&typeof e[n]<"u"}function pc(n){return ft("modalities",n)||ft("inputAudioFormat",n)||ft("outputAudioFormat",n)||ft("inputAudioTranscription",n)||ft("turnDetection",n)||ft("inputAudioNoiseReduction",n)||ft("speed",n)}function fc(n){var e,t,r,s,a,i,u,l;if(!pc(n)){const c=(e=n.audio)!=null&&e.input?{format:tr(n.audio.input.format),noiseReduction:n.audio.input.noiseReduction??null,transcription:n.audio.input.transcription,turnDetection:n.audio.input.turnDetection}:void 0,p=((r=(t=n.audio)==null?void 0:t.output)==null?void 0:r.voice)??n.voice,f=(s=n.audio)!=null&&s.output||typeof p<"u"?{format:tr((i=(a=n.audio)==null?void 0:a.output)==null?void 0:i.format),voice:p,speed:(l=(u=n.audio)==null?void 0:u.output)==null?void 0:l.speed}:void 0;return{model:n.model,instructions:n.instructions,toolChoice:n.toolChoice,tools:n.tools,tracing:n.tracing,providerData:n.providerData,prompt:n.prompt,outputModalities:n.outputModalities,audio:c||f?{input:c,output:f}:void 0}}return{model:n.model,instructions:n.instructions,toolChoice:n.toolChoice,tools:n.tools,tracing:n.tracing,providerData:n.providerData,prompt:n.prompt,outputModalities:n.modalities,audio:{input:{format:tr(n.inputAudioFormat),noiseReduction:n.inputAudioNoiseReduction??null,transcription:n.inputAudioTranscription,turnDetection:n.turnDetection},output:{format:tr(n.outputAudioFormat),voice:n.voice,speed:n.speed}}}}function tr(n){if(!n)return;if(typeof n=="object")return n;const e=String(n);return e==="pcm16"?{type:"audio/pcm",rate:24e3}:e==="g711_ulaw"?{type:"audio/pcmu"}:e==="g711_alaw"?{type:"audio/pcma"}:{type:"audio/pcm",rate:24e3}}m({itemId:d()});const La=he("role",[m({itemId:d(),previousItemId:d().nullable().optional(),type:g("message"),role:g("system"),content:B(m({type:g("input_text"),text:d()}))}),m({itemId:d(),previousItemId:d().nullable().optional(),type:g("message"),role:g("user"),status:oe(["in_progress","completed"]),content:B(m({type:g("input_text"),text:d()}).or(m({type:g("input_audio"),audio:d().nullable().optional(),transcript:d().nullable()})))}),m({itemId:d(),previousItemId:d().nullable().optional(),type:g("message"),role:g("assistant"),status:oe(["in_progress","completed","incomplete"]),content:B(m({type:g("output_text"),text:d()}).or(m({type:g("output_audio"),audio:d().nullable().optional(),transcript:d().nullable().optional()})))})]),Za=m({itemId:d(),previousItemId:d().nullable().optional(),type:g("function_call"),status:oe(["in_progress","completed","incomplete"]),arguments:d(),name:d(),output:d().nullable()}),Ua=m({itemId:d(),previousItemId:d().nullable().optional(),type:oe(["mcp_call","mcp_tool_call"]),status:oe(["in_progress","completed","incomplete"]),arguments:d(),name:d(),output:d().nullable()}),hc=m({itemId:d(),type:g("mcp_approval_request"),serverLabel:d(),name:d(),arguments:re(d(),U()),approved:at().optional().nullable()}),Se=Ds("openai-agents:realtime"),qa=m({id:d().optional().nullable(),conversation_id:d().optional().nullable(),max_output_tokens:A().or(g("inf")).optional().nullable(),metadata:re(d(),U()).optional().nullable(),output_modalities:B(d()).optional().nullable(),object:g("realtime.response").optional().nullable(),output:B(U()).optional().nullable(),audio:m({output:m({format:U().optional().nullable(),voice:d().optional().nullable()}).optional().nullable()}).optional().nullable(),status:oe(["completed","incomplete","failed","cancelled","in_progress"]).optional().nullable(),status_details:re(d(),U()).optional().nullable(),usage:m({input_tokens:A().optional(),input_token_details:re(d(),U()).optional().nullable(),output_tokens:A().optional(),output_token_details:re(d(),U()).optional().nullable()}).optional().nullable()}),mc=m({id:d().optional(),audio:d().nullable().optional(),text:d().nullable().optional(),transcript:d().nullable().optional(),type:ms([g("input_text"),g("input_audio"),g("item_reference"),g("output_text"),g("output_audio")])}),Ot=m({id:d().optional(),arguments:d().optional(),call_id:d().optional(),content:B(mc).optional(),name:d().optional(),output:d().nullable().optional(),role:oe(["user","assistant","system"]).optional(),status:oe(["completed","incomplete","in_progress"]).optional(),type:oe(["message","function_call","function_call_output","mcp_list_tools","mcp_tool_call","mcp_call","mcp_approval_request","mcp_approval_response"]).optional(),approval_request_id:d().nullable().optional(),approve:at().nullable().optional(),reason:d().nullable().optional(),server_label:d().optional(),error:U().nullable().optional(),tools:B(m({name:d(),description:d(),input_schema:re(U()).optional()}).passthrough()).optional()}).passthrough(),gc=m({type:g("conversation.created"),event_id:d(),conversation:m({id:d().optional(),object:g("realtime.conversation").optional()})}),_c=m({type:g("conversation.item.added"),event_id:d(),item:Ot,previous_item_id:d().nullable().optional()}),yc=m({type:g("conversation.item.done"),event_id:d(),item:Ot,previous_item_id:d().nullable().optional()}),vc=m({type:g("conversation.item.deleted"),event_id:d(),item_id:d()}),wc=m({type:g("conversation.item.input_audio_transcription.completed"),event_id:d(),item_id:d(),content_index:A(),transcript:d(),logprobs:B(U()).nullable().optional()}),bc=m({type:g("conversation.item.input_audio_transcription.delta"),event_id:d(),item_id:d(),content_index:A().optional(),delta:d().optional(),logprobs:B(U()).nullable().optional()}),xc=m({type:g("conversation.item.input_audio_transcription.failed"),event_id:d(),item_id:d(),content_index:A(),error:m({code:d().optional(),message:d().optional(),param:d().optional(),type:d().optional()})}),Sc=m({type:g("conversation.item.retrieved"),event_id:d(),item:Ot}),Ic=m({type:g("conversation.item.truncated"),event_id:d(),item_id:d(),audio_end_ms:A(),content_index:A()}),Tc=m({type:g("conversation.item.create"),item:Ot,event_id:d().optional(),previous_item_id:d().nullable().optional()}),kc=m({type:g("conversation.item.delete"),item_id:d(),event_id:d().optional()}),Ac=m({type:g("conversation.item.retrieve"),item_id:d(),event_id:d().optional()}),Cc=m({type:g("conversation.item.truncate"),item_id:d(),audio_end_ms:A(),content_index:A(),event_id:d().optional()}),Ec=m({type:g("error"),event_id:d().optional(),error:U().optional()}),Oc=m({type:g("input_audio_buffer.cleared"),event_id:d()}),Rc=m({type:g("input_audio_buffer.append"),audio:d(),event_id:d().optional()}),Nc=m({type:g("input_audio_buffer.clear"),event_id:d().optional()}),Dc=m({type:g("input_audio_buffer.commit"),event_id:d().optional()}),Pc=m({type:g("input_audio_buffer.committed"),event_id:d(),item_id:d(),previous_item_id:d().nullable().optional()}),Mc=m({type:g("input_audio_buffer.speech_started"),event_id:d(),item_id:d(),audio_start_ms:A()}),jc=m({type:g("input_audio_buffer.speech_stopped"),event_id:d(),item_id:d(),audio_end_ms:A()}),$c=m({type:g("output_audio_buffer.started"),event_id:d()}).passthrough(),Fc=m({type:g("output_audio_buffer.stopped"),event_id:d()}).passthrough(),Lc=m({type:g("output_audio_buffer.cleared"),event_id:d()}),Zc=m({type:g("rate_limits.updated"),event_id:d(),rate_limits:B(m({limit:A().optional(),name:oe(["requests","tokens"]).optional(),remaining:A().optional(),reset_seconds:A().optional()}))}),Uc=m({type:g("response.output_audio.delta"),event_id:d(),item_id:d(),content_index:A(),delta:d(),output_index:A(),response_id:d()}),qc=m({type:g("response.output_audio.done"),event_id:d(),item_id:d(),content_index:A(),output_index:A(),response_id:d()}),Jc=m({type:g("response.output_audio_transcript.delta"),event_id:d(),item_id:d(),content_index:A(),delta:d(),output_index:A(),response_id:d()}),Bc=m({type:g("response.output_audio_transcript.done"),event_id:d(),item_id:d(),content_index:A(),transcript:d(),output_index:A(),response_id:d()}),Gc=m({type:g("response.content_part.added"),event_id:d(),item_id:d(),content_index:A(),output_index:A(),response_id:d(),part:m({audio:d().optional(),text:d().optional(),transcript:d().optional(),type:oe(["text","audio"]).optional()})}),zc=m({type:g("response.content_part.done"),event_id:d(),item_id:d(),content_index:A(),output_index:A(),response_id:d(),part:m({audio:d().optional(),text:d().optional(),transcript:d().optional(),type:oe(["text","audio"]).optional()})}),Vc=m({type:g("response.created"),event_id:d(),response:qa}),Ja=m({type:g("response.done"),event_id:d(),response:qa}),Wc=m({type:g("response.function_call_arguments.delta"),event_id:d(),item_id:d(),call_id:d(),delta:d(),output_index:A(),response_id:d()}),Hc=m({type:g("response.function_call_arguments.done"),event_id:d(),item_id:d(),call_id:d(),arguments:d(),output_index:A(),response_id:d()}),Kc=m({type:g("response.output_item.added"),event_id:d(),item:Ot,output_index:A(),response_id:d()}),Yc=m({type:g("response.output_item.done"),event_id:d(),item:Ot,output_index:A(),response_id:d()}),Xc=m({type:g("response.output_text.delta"),event_id:d(),item_id:d(),content_index:A(),delta:d(),output_index:A(),response_id:d()}),Qc=m({type:g("response.output_text.done"),event_id:d(),item_id:d(),content_index:A(),text:d(),output_index:A(),response_id:d()}),ed=m({type:g("session.created"),event_id:d(),session:U()}),td=m({type:g("session.updated"),event_id:d(),session:U()}),nd=m({type:g("response.cancel"),event_id:d().optional(),response_id:d().optional()}),rd=m({type:g("response.create"),event_id:d().optional(),response:U().optional()}),sd=m({type:g("session.update"),event_id:d().optional(),session:U()}),ad=m({type:g("mcp_list_tools.in_progress"),event_id:d().optional(),item_id:d().optional()}),id=m({type:g("mcp_list_tools.completed"),event_id:d().optional(),item_id:d().optional()}),od=m({type:g("response.mcp_call_arguments.delta"),event_id:d(),response_id:d(),item_id:d(),output_index:A(),delta:d(),obfuscation:d()}),ud=m({type:g("response.mcp_call_arguments.done"),event_id:d(),response_id:d(),item_id:d(),output_index:A(),arguments:d()}),cd=m({type:g("response.mcp_call.in_progress"),event_id:d(),output_index:A(),item_id:d()}),dd=m({type:g("response.mcp_call.completed"),event_id:d(),output_index:A(),item_id:d()}),ld=m({type:g("mcp_list_tools.failed"),event_id:d().optional(),item_id:d().optional()}),pd=m({type:d(),event_id:d().optional().nullable()}).passthrough(),fd=he("type",[gc,_c,yc,vc,wc,bc,xc,Sc,Ic,Ec,Oc,Pc,Mc,jc,$c,Fc,Lc,Zc,Uc,qc,Jc,Bc,Gc,zc,Vc,Ja,Wc,Hc,Kc,Yc,Xc,Qc,ed,td,ad,id,ld,od,ud,cd,dd]);he("type",[Tc,kc,Ac,Cc,Rc,Nc,Dc,nd,rd,sd]);function Ur(n){const e=JSON.parse(n.data.toString()),t=fd.safeParse(e);if(!t.success){const r=pd.safeParse(e);return r.success?{data:r.data,isGeneric:!0}:{data:null,isGeneric:!0}}return{data:t.data,isGeneric:!1}}const Ba="gpt-realtime",Ae={outputModalities:["audio"],audio:{input:{format:{type:"audio/pcm",rate:24e3},transcription:{model:"gpt-4o-mini-transcribe"},turnDetection:{type:"semantic_vad"},noiseReduction:null},output:{format:{type:"audio/pcm",rate:24e3},speed:1}}},Br=class Br extends Sr{constructor(t={}){super();I(this,vt);I(this,_n);I(this,fe,null);I(this,yn,null);_(this,"eventEmitter",new Gn);v(this,vt,t.model??Ba),v(this,_n,t.apiKey)}get currentModel(){return o(this,vt)}set currentModel(t){v(this,vt,t)}get _rawSessionConfig(){return o(this,yn)??null}async _getApiKey(t){const r=t.apiKey??o(this,_n);return typeof r=="function"?await r():r}_onMessage(t){var a,i,u,l,c,p;const{data:r,isGeneric:s}=Ur(t);if(r!==null&&(this.emit("*",r),!s)){if(r.type==="error"?this.emit("error",{type:"error",error:r}):this.emit(r.type,r),r.type==="response.created"){this.emit("turn_started",{type:"response_started",providerData:{...r}});return}if(r.type==="session.updated"&&v(this,yn,r.session),r.type==="response.done"){const f=Ja.safeParse(r);if(!f.success){Se.error("Error parsing response done event",f.error);return}const h=((a=f.data.response.usage)==null?void 0:a.input_tokens)??0,b=((i=f.data.response.usage)==null?void 0:i.output_tokens)??0,y=h+b,w=new Wn({inputTokens:h,inputTokensDetails:((u=f.data.response.usage)==null?void 0:u.input_token_details)??{},outputTokens:b,outputTokensDetails:((l=f.data.response.usage)==null?void 0:l.output_token_details)??{},totalTokens:y});this.emit("usage_update",w),this.emit("turn_done",{type:"response_done",response:{id:f.data.response.id??"",output:f.data.response.output??[],usage:{inputTokens:h,inputTokensDetails:((c=f.data.response.usage)==null?void 0:c.input_token_details)??{},outputTokens:b,outputTokensDetails:((p=f.data.response.usage)==null?void 0:p.output_token_details)??{},totalTokens:y}}});return}if(r.type==="response.output_audio.done"){this.emit("audio_done");return}if(r.type==="conversation.item.deleted"){this.emit("item_deleted",{itemId:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.completed"||r.type==="conversation.item.truncated"){this.sendEvent({type:"conversation.item.retrieve",item_id:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.delta"||r.type==="response.output_text.delta"||r.type==="response.output_audio_transcript.delta"||r.type==="response.function_call_arguments.delta"){r.type==="response.output_audio_transcript.delta"&&this.emit("audio_transcript_delta",{type:"transcript_delta",delta:r.delta,itemId:r.item_id,responseId:r.response_id});return}if(r.type==="conversation.item.added"||r.type==="conversation.item.done"||r.type==="conversation.item.retrieved"){if(r.item.type==="mcp_list_tools"&&r.type==="conversation.item.done"){const f=r.item.server_label??"",h=r.item.tools??[];try{this.emit("mcp_tools_listed",{serverLabel:f,tools:h})}catch(b){Se.error("Error emitting mcp_tools_listed",b,r.item)}return}if(r.item.type==="message"){const f=r.type==="conversation.item.added"||r.type==="conversation.item.done"?r.previous_item_id:null,h=La.parse({itemId:r.item.id,previousItemId:f,type:r.item.type,role:r.item.role,content:r.item.content,status:r.item.status});this.emit("item_update",h);return}if(r.item.type==="mcp_approval_request"&&r.type==="conversation.item.done"){const f=r.item,h=hc.parse({itemId:f.id,type:f.type,serverLabel:f.server_label,name:f.name,arguments:JSON.parse(f.arguments||"{}"),approved:f.approved});this.emit("item_update",h),this.emit("mcp_approval_request",h);return}if(r.item.type==="mcp_tool_call"||r.item.type==="mcp_call"){const f=r.type==="conversation.item.done"?"completed":"in_progress",h=Ua.parse({itemId:r.item.id,type:r.item.type,status:f,arguments:r.item.arguments,name:r.item.name,output:r.item.output});this.emit("item_update",h),r.type==="conversation.item.done"&&this.emit("mcp_tool_call_completed",h);return}}if(r.type==="response.mcp_call.in_progress"){const f=r;this.sendEvent({type:"conversation.item.retrieve",item_id:f.item_id});return}if(r.type==="mcp_list_tools.in_progress"){const f=r;f.item_id&&this.sendEvent({type:"conversation.item.retrieve",item_id:f.item_id});return}if(r.type==="response.output_item.done"||r.type==="response.output_item.added"){const f=r.item;if(f.type==="function_call"&&f.status==="completed"){const h=Za.parse({itemId:f.id,type:f.type,status:"in_progress",arguments:f.arguments,name:f.name,output:null});this.emit("item_update",h),this.emit("function_call",{id:f.id,type:"function_call",callId:f.call_id??"",arguments:f.arguments??"",name:f.name??""});return}if(f.type==="mcp_tool_call"||f.type==="mcp_call"){const h=Ua.parse({itemId:f.id,type:f.type,status:r.type==="response.output_item.done"?"completed":"in_progress",arguments:f.arguments,name:f.name,output:f.output});this.emit("item_update",h);return}if(f.type==="message"){const h=La.parse({itemId:r.item.id,type:r.item.type,role:r.item.role,content:r.item.content,status:r.type==="response.output_item.done"?f.status??"completed":f.status??"in_progress"});this.emit("item_update",h);return}}}}_onError(t){this.emit("error",{type:"error",error:t})}_onOpen(){this.emit("connected")}_onClose(){this.emit("disconnected")}sendMessage(t,r,{triggerResponse:s=!0}={}){const a=typeof t=="string"?[{type:"input_text",text:t}]:t.content.map(i=>i.type==="input_image"?{type:"input_image",image_url:i.image,...i.providerData??{}}:i);this.sendEvent({type:"conversation.item.create",item:{type:"message",role:"user",content:a},...r}),s&&this.sendEvent({type:"response.create"})}addImage(t,{triggerResponse:r=!0}={}){this.sendMessage({type:"message",role:"user",content:[{type:"input_image",image:t}]},{},{triggerResponse:r})}_getMergedSessionConfig(t){var a,i,u,l,c,p,f,h,b,y,w,O,R,q,X,F,V,Q,ee,ve,Ce,Ie,Ka,Ya,Xa,Qa,ei,ti;const r=fc(t),s={type:"realtime",instructions:r.instructions,model:r.model??o(this,vt),output_modalities:r.outputModalities??Ae.outputModalities,audio:{input:{format:((i=(a=r.audio)==null?void 0:a.input)==null?void 0:i.format)??((l=(u=Ae.audio)==null?void 0:u.input)==null?void 0:l.format),noise_reduction:((p=(c=r.audio)==null?void 0:c.input)==null?void 0:p.noiseReduction)??((h=(f=Ae.audio)==null?void 0:f.input)==null?void 0:h.noiseReduction),transcription:((y=(b=r.audio)==null?void 0:b.input)==null?void 0:y.transcription)??((O=(w=Ae.audio)==null?void 0:w.input)==null?void 0:O.transcription),turn_detection:Br.buildTurnDetectionConfig((q=(R=r.audio)==null?void 0:R.input)==null?void 0:q.turnDetection)??((F=(X=Ae.audio)==null?void 0:X.input)==null?void 0:F.turnDetection)},output:{format:((Q=(V=r.audio)==null?void 0:V.output)==null?void 0:Q.format)??((ve=(ee=Ae.audio)==null?void 0:ee.output)==null?void 0:ve.format),voice:((Ie=(Ce=r.audio)==null?void 0:Ce.output)==null?void 0:Ie.voice)??((Ya=(Ka=Ae.audio)==null?void 0:Ka.output)==null?void 0:Ya.voice),speed:((Qa=(Xa=r.audio)==null?void 0:Xa.output)==null?void 0:Qa.speed)??((ti=(ei=Ae.audio)==null?void 0:ei.output)==null?void 0:ti.speed)}},tool_choice:r.toolChoice??Ae.toolChoice,...r.providerData??{}};return r.prompt&&(s.prompt={id:r.prompt.promptId,version:r.prompt.version,variables:r.prompt.variables}),r.tools&&r.tools.length>0&&(s.tools=r.tools.map(Sd=>({...Sd,strict:void 0}))),s}static buildTurnDetectionConfig(t){if(typeof t>"u")return;const{type:r,createResponse:s,create_response:a,eagerness:i,interruptResponse:u,interrupt_response:l,prefixPaddingMs:c,prefix_padding_ms:p,silenceDurationMs:f,silence_duration_ms:h,threshold:b,idleTimeoutMs:y,idle_timeout_ms:w,...O}=t,R={type:r,create_response:s||a,eagerness:i,interrupt_response:u||l,prefix_padding_ms:c||p,silence_duration_ms:f||h,idle_timeout_ms:y||w,threshold:b,...O};return Object.keys(R).forEach(q=>{R[q]===void 0&&delete R[q]}),Object.keys(R).length>0?R:void 0}set _tracingConfig(t){v(this,fe,t)}_updateTracingConfig(t){var r,s,a;if(typeof o(this,fe)>"u"&&v(this,fe,null),t==="auto"){this.sendEvent({type:"session.update",session:{type:"realtime",tracing:"auto"}});return}if(o(this,fe)!==null&&typeof o(this,fe)!="string"&&typeof t!="string"){Se.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");return}if(t===null){Se.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."),this.sendEvent({type:"session.update",session:{type:"realtime",tracing:null}});return}if(o(this,fe)===null||typeof o(this,fe)=="string"){this.sendEvent({type:"session.update",session:{type:"realtime",tracing:t}});return}if((t==null?void 0:t.group_id)!==((r=o(this,fe))==null?void 0:r.group_id)||(t==null?void 0:t.metadata)!==((s=o(this,fe))==null?void 0:s.metadata)||(t==null?void 0:t.workflow_name)!==((a=o(this,fe))==null?void 0:a.workflow_name)){Se.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s",JSON.stringify(o(this,fe)),JSON.stringify(t));return}this.sendEvent({type:"session.update",session:{type:"realtime",tracing:t}})}updateSessionConfig(t){const r=this._getMergedSessionConfig(t);this.sendEvent({type:"session.update",session:r})}sendFunctionCallOutput(t,r,s=!0){this.sendEvent({type:"conversation.item.create",item:{type:"function_call_output",output:r,call_id:t.callId}});try{const a=Za.parse({itemId:t.id,previousItemId:t.previousItemId,type:"function_call",status:"completed",arguments:t.arguments,name:t.name,output:r});this.emit("item_update",a)}catch(a){Se.error("Error parsing tool call item",a,t)}s&&this.sendEvent({type:"response.create"})}sendAudio(t,{commit:r=!1}={}){this.sendEvent({type:"input_audio_buffer.append",audio:Da(t)}),r&&this.sendEvent({type:"input_audio_buffer.commit"})}resetHistory(t,r){const{removals:s,additions:a,updates:i}=sc(t,r),u=new Set(s.map(c=>c.itemId));for(const c of i)u.add(c.itemId);if(u.size>0)for(const c of u)this.sendEvent({type:"conversation.item.delete",item_id:c});const l=[...a,...i];for(const c of l)if(c.type==="message"){const p={type:"message",role:c.role,content:c.content,id:c.itemId};c.role!=="system"&&c.status&&(p.status=c.status),this.sendEvent({type:"conversation.item.create",item:p})}else c.type==="function_call"&&Se.warn("Function calls cannot be manually added or updated at the moment. Ignoring.")}sendMcpResponse(t,r){this.sendEvent({type:"conversation.item.create",previous_item_id:t.itemId,item:{type:"mcp_approval_response",approval_request_id:t.itemId,approve:r}})}};vt=new WeakMap,_n=new WeakMap,fe=new WeakMap,yn=new WeakMap;let sn=Br;const hd=globalThis.WebSocket;function md(){return!0}const Ga=globalThis.RTCPeerConnection,gd=navigator.mediaDevices;class za extends sn{constructor(t={}){if(typeof Ga>"u")throw new Error("WebRTC is not supported in this environment");super(t);_(this,"options");I(this,vn);I(this,H,{status:"disconnected",peerConnection:void 0,dataChannel:void 0,callId:void 0});I(this,wn);I(this,wt,!1);I(this,bn,!1);this.options=t,v(this,vn,t.baseUrl??"https://api.openai.com/v1/realtime/calls"),v(this,wn,t.useInsecureApiKey??!1)}get callId(){return o(this,H).callId}get status(){return o(this,H).status}get connectionState(){return o(this,H)}get muted(){return o(this,bn)}async connect(t){if(o(this,H).status==="connected")return;o(this,H).status==="connecting"&&Se.warn("Realtime connection already in progress. Please await original promise");const r=t.model??this.currentModel;this.currentModel=r;const s=t.url??o(this,vn),a=await this._getApiKey(t),i=typeof a=="string"&&a.startsWith("ek_");if(!o(this,wn)&&!i)throw new se("Using the WebRTC connection in a browser environment requires an ephemeral client key. If you need to use a regular API key, use the WebSocket transport or set the `useInsecureApiKey` option to true.");return new Promise(async(u,l)=>{var c,p;try{const f={...t.initialSessionConfig||{},model:this.currentModel},h=new URL(s);let b=new Ga;const y=b.createDataChannel("oai-events");let w;if(v(this,H,{status:"connecting",peerConnection:b,dataChannel:y,callId:w}),this.emit("connection_change",o(this,H).status),y.addEventListener("open",()=>{v(this,H,{status:"connected",peerConnection:b,dataChannel:y,callId:w}),this.updateSessionConfig(f),this.emit("connection_change",o(this,H).status),this._onOpen(),u()}),y.addEventListener("error",F=>{this.close(),this._onError(F),l(F)}),y.addEventListener("message",F=>{this._onMessage(F);const{data:V,isGeneric:Q}=Ur(F);!V||Q||(V.type==="response.created"?v(this,wt,!0):V.type==="response.done"&&v(this,wt,!1),V.type==="session.created"&&(this._tracingConfig=V.session.tracing,this._updateTracingConfig(f.tracing??"auto")))}),md()){const F=this.options.audioElement??document.createElement("audio");F.autoplay=!0,b.ontrack=V=>{F.srcObject=V.streams[0]}}const O=this.options.mediaStream??await gd.getUserMedia({audio:!0});b.addTrack(O.getAudioTracks()[0]),this.options.changePeerConnection&&(b=await this.options.changePeerConnection(b),v(this,H,{...o(this,H),peerConnection:b}));const R=await b.createOffer();if(await b.setLocalDescription(R),!R.sdp)throw new Error("Failed to create offer");const q=await fetch(h,{method:"POST",body:R.sdp,headers:{"Content-Type":"application/sdp",Authorization:`Bearer ${a}`,"X-OpenAI-Agents-SDK":$a["X-OpenAI-Agents-SDK"]}});w=(p=(c=q.headers)==null?void 0:c.get("Location"))==null?void 0:p.split("/").pop(),v(this,H,{...o(this,H),callId:w});const X={type:"answer",sdp:await q.text()};await b.setRemoteDescription(X)}catch(f){this.close(),this._onError(f),l(f)}})}sendEvent(t){if(!o(this,H).dataChannel||o(this,H).dataChannel.readyState!=="open")throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");o(this,H).dataChannel.send(JSON.stringify(t))}mute(t){v(this,bn,t),o(this,H).peerConnection&&o(this,H).peerConnection.getSenders().forEach(s=>{s.track&&(s.track.enabled=!t)})}close(){if(o(this,H).dataChannel&&o(this,H).dataChannel.close(),o(this,H).peerConnection){const t=o(this,H).peerConnection;t.getSenders().forEach(r=>{var s;(s=r.track)==null||s.stop()}),t.close()}o(this,H).status!=="disconnected"&&(v(this,H,{status:"disconnected",peerConnection:void 0,dataChannel:void 0,callId:void 0}),this.emit("connection_change",o(this,H).status),this._onClose())}interrupt(){o(this,wt)&&(this.sendEvent({type:"response.cancel"}),v(this,wt,!1)),this.sendEvent({type:"output_audio_buffer.clear"})}}vn=new WeakMap,H=new WeakMap,wn=new WeakMap,wt=new WeakMap,bn=new WeakMap;class Va extends sn{constructor(t={}){super(t);I(this,rr);I(this,Qe);I(this,et);I(this,ie,{status:"disconnected",websocket:void 0});I(this,xn);I(this,qe);I(this,bt);_(this,"_firstAudioTimestamp");_(this,"_audioLengthMs",0);I(this,xt,!1);I(this,Zt);I(this,Sn);v(this,et,t.url),v(this,xn,t.useInsecureApiKey??!1),v(this,Zt,t.createWebSocket),v(this,Sn,t.skipOpenEventListeners??!1)}getCommonRequestHeaders(){return $a}get status(){return o(this,ie).status}get connectionState(){return o(this,ie)}get muted(){return null}get currentItemId(){return o(this,qe)}_onAudio(t){this.emit("audio",t)}async connect(t){const r=t.model??this.currentModel;this.currentModel=r,v(this,Qe,await this._getApiKey(t));const s=t.url??o(this,et)??`wss://api.openai.com/v1/realtime?model=${this.currentModel}`;v(this,et,s);const a={...t.initialSessionConfig||{},model:this.currentModel};await new Promise((i,u)=>{L(this,rr,ai).call(this,i,u,a).catch(u)}),await this.updateSessionConfig(a)}sendEvent(t){if(!o(this,ie).websocket)throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");o(this,ie).websocket.send(JSON.stringify(t))}close(){var t;(t=o(this,ie).websocket)==null||t.close(),v(this,qe,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,v(this,bt,void 0)}mute(t){throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.")}sendAudio(t,r={}){o(this,ie).status==="connected"&&super.sendAudio(t,r)}_cancelResponse(){o(this,xt)&&(this.sendEvent({type:"response.cancel"}),v(this,xt,!1))}_interrupt(t,r=!0){if(t<0)return;r&&this._cancelResponse();const s=this._audioLengthMs??Number.POSITIVE_INFINITY,a=Math.max(0,Math.floor(Math.min(t,s)));this.emit("audio_interrupted"),this.sendEvent({type:"conversation.item.truncate",item_id:o(this,qe),content_index:o(this,bt),audio_end_ms:a})}interrupt(t=!0){if(!o(this,qe)||typeof this._firstAudioTimestamp!="number")return;const r=Date.now()-this._firstAudioTimestamp;r>=0&&this._interrupt(r,t),v(this,qe,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,v(this,bt,void 0)}}Qe=new WeakMap,et=new WeakMap,ie=new WeakMap,xn=new WeakMap,qe=new WeakMap,bt=new WeakMap,xt=new WeakMap,Zt=new WeakMap,Sn=new WeakMap,rr=new WeakSet,ai=async function(t,r,s){if(o(this,ie).websocket){t();return}if(!o(this,Qe))throw new se("API key is not set. Please call `connect()` with an API key first.");if(!o(this,Qe).startsWith("ek_")&&!o(this,xn))throw new se("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");let a=null;if(o(this,Zt))a=await o(this,Zt).call(this,{url:o(this,et),apiKey:o(this,Qe)});else{const u=["realtime","openai-insecure-api-key."+o(this,Qe),ic];a=new hd(o(this,et),u)}v(this,ie,{status:"connecting",websocket:a}),this.emit("connection_change",o(this,ie).status);const i=()=>{v(this,ie,{status:"connected",websocket:a}),this.emit("connection_change",o(this,ie).status),this._onOpen(),t()};o(this,Sn)===!0?i():a.addEventListener("open",i),a.addEventListener("error",u=>{this._onError(u),v(this,ie,{status:"disconnected",websocket:void 0}),this.emit("connection_change",o(this,ie).status),r(u)}),a.addEventListener("message",u=>{var p,f,h,b,y,w,O;this._onMessage(u);const{data:l,isGeneric:c}=Ur(u);if(!(!l||c))if(l.type==="response.output_audio.delta"){v(this,bt,l.content_index),v(this,qe,l.item_id),this._firstAudioTimestamp===void 0&&(this._firstAudioTimestamp=Date.now(),this._audioLengthMs=0);const R=Na(l.delta),q=(h=(f=(p=this._rawSessionConfig)==null?void 0:p.audio)==null?void 0:f.output)==null?void 0:h.format;if(q&&typeof q=="object"){const F=q.type;if(F==="audio/pcmu"||F==="audio/pcma")this._audioLengthMs+=R.byteLength/8;else if(F==="audio/pcm"){const V=q.rate??24e3;this._audioLengthMs+=R.byteLength/2/V*1e3}else this._audioLengthMs+=R.byteLength/24/2}else typeof q=="string"?q.startsWith("g711_")?this._audioLengthMs+=R.byteLength/8:this._audioLengthMs+=R.byteLength/24/2:this._audioLengthMs+=R.byteLength/24/2;const X={type:"audio",data:R,responseId:l.response_id};this._onAudio(X)}else if(l.type==="input_audio_buffer.speech_started"){const R=((O=(w=(y=(b=this._rawSessionConfig)==null?void 0:b.audio)==null?void 0:y.input)==null?void 0:w.turn_detection)==null?void 0:O.interrupt_response)??!1;this.interrupt(!R)}else l.type==="response.created"?v(this,xt,!0):l.type==="response.done"?v(this,xt,!1):l.type==="session.created"&&(this._tracingConfig=l.session.tracing,this._updateTracingConfig(s.tracing??"auto"))}),a.addEventListener("close",()=>{v(this,ie,{status:"disconnected",websocket:void 0}),this.emit("connection_change",o(this,ie).status),this._onClose()})};const Wa=Symbol("backgroundResult");function _d(n){return{[Wa]:!0,content:n}}function Ha(n){return typeof n=="object"&&n!==null&&Wa in n}function yd(n){return n.type==="function"||n.type==="hosted_tool"&&n.name==="hosted_mcp"}function vd(n){if(n.type==="function")return n;if(n.type==="hosted_tool"&&n.name==="hosted_mcp"){const e=n.providerData.server_url&&n.providerData.server_url.length>0?n.providerData.server_url:void 0;return{type:"mcp",server_label:n.providerData.server_label,server_url:e,headers:n.providerData.headers,allowed_tools:n.providerData.allowed_tools,require_approval:n.providerData.require_approval}}throw new se(`Invalid tool type: ${n}`)}function wd(){return JSON.parse(JSON.stringify(Ae))}class bd extends Gn{constructor(t,r={}){super();I(this,K);_(this,"initialAgent");_(this,"options");I(this,$);I(this,D);I(this,Ut);I(this,P);I(this,qt,[]);I(this,Jt);I(this,In,{});I(this,Y,[]);I(this,Bt);I(this,Gt,{});I(this,Pe,!1);I(this,Tn,new Map);I(this,St,[]);I(this,kn,wd());I(this,An,!0);this.initialAgent=t,this.options=r,typeof r.transport>"u"&&ac()||r.transport==="webrtc"?v(this,$,new za):r.transport==="websocket"||typeof r.transport>"u"?v(this,$,new Va):v(this,$,r.transport),v(this,D,t),v(this,P,new At({...r.context??{},history:o(this,Y)})),v(this,qt,(r.outputGuardrails??[]).map(dc)),v(this,Jt,cc(r.outputGuardrailSettings??{})),v(this,Bt,r.historyStoreAudio??!1),v(this,An,r.automaticallyTriggerResponseForMcpToolCalls??!0)}get transport(){return o(this,$)}get currentAgent(){return o(this,D)}get usage(){return o(this,P).usage}get context(){return o(this,P)}get muted(){return o(this,$).muted}get history(){return o(this,Y)}get availableMcpTools(){return o(this,St)}async updateAgent(t){return o(this,D).emit("agent_handoff",o(this,P),t),this.emit("agent_handoff",o(this,P),o(this,D),t),await L(this,K,sr).call(this,t),await o(this,$).updateSessionConfig(await L(this,K,ar).call(this)),t}async connect(t){await L(this,K,sr).call(this,this.initialAgent),L(this,K,ui).call(this),await o(this,$).connect({apiKey:t.apiKey??this.options.apiKey,model:this.options.model,url:t.url,initialSessionConfig:await L(this,K,ar).call(this,this.options.config)}),v(this,Y,[]),this.emit("history_updated",o(this,Y))}updateHistory(t){let r;typeof t=="function"?r=t(o(this,Y)):r=t,o(this,$).resetHistory(o(this,Y),r)}sendMessage(t,r={}){o(this,$).sendMessage(t,r)}addImage(t,{triggerResponse:r=!0}={}){o(this,$).addImage(t,{triggerResponse:r})}mute(t){o(this,$).mute(t)}close(){v(this,Gt,{}),o(this,$).close()}sendAudio(t,r={}){o(this,$).sendAudio(t,r)}interrupt(){o(this,$).interrupt()}async approve(t,r={alwaysApprove:!1}){o(this,P).approveTool(t,r);const s=o(this,D).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await L(this,K,ir).call(this,t.rawItem,s);else if(t.rawItem.type==="hosted_tool_call"){r.alwaysApprove&&Se.warn("Always approving MCP tools is not supported. Use the allowed tools configuration instead.");const a=Fa(t);o(this,$).sendMcpResponse(a,!0)}else throw new me(`Tool ${t.rawItem.name} not found`)}async reject(t,r={alwaysReject:!1}){o(this,P).rejectTool(t,r);const s=o(this,D).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await L(this,K,ir).call(this,t.rawItem,s);else if(t.rawItem.type==="hosted_tool_call"){r.alwaysReject&&Se.warn("Always rejecting MCP tools is not supported. Use the allowed tools configuration instead.");const a=Fa(t);o(this,$).sendMcpResponse(a,!1)}else throw new me(`Tool ${t.rawItem.name} not found`)}}$=new WeakMap,D=new WeakMap,Ut=new WeakMap,P=new WeakMap,qt=new WeakMap,Jt=new WeakMap,In=new WeakMap,Y=new WeakMap,Bt=new WeakMap,Gt=new WeakMap,Pe=new WeakMap,Tn=new WeakMap,St=new WeakMap,kn=new WeakMap,An=new WeakMap,K=new WeakSet,sr=async function(t){v(this,D,t);const r=await o(this,D).getEnabledHandoffs(o(this,P)),s=r.map(l=>l.getHandoffAsFunctionTool()),a=(await o(this,D).getAllTools(o(this,P))).filter(yd).map(vd),i=typeof o(this,D).tools<"u"||typeof o(this,D).mcpServers<"u",u=r.length>0;v(this,Ut,i||u?[...a,...s]:void 0),L(this,K,Qr).call(this)},ar=async function(t={}){const r=await o(this,D).getSystemPrompt(o(this,P)),s=this.options.tracingDisabled?null:this.options.workflowName?{workflow_name:this.options.workflowName}:"auto";s!==null&&s!=="auto"?(this.options.groupId&&(s.group_id=this.options.groupId),this.options.traceMetadata&&(s.metadata=this.options.traceMetadata)):(this.options.groupId||this.options.traceMetadata)&&Se.warn("In order to set traceMetadata or a groupId you need to specify a workflowName.");const i={...{...o(this,kn)??{},...this.options.config??{},...t??{}},instructions:r,voice:o(this,D).voice,model:this.options.model,tools:o(this,Ut),tracing:s,prompt:typeof o(this,D).prompt=="function"?await o(this,D).prompt(o(this,P),o(this,D)):o(this,D).prompt};return v(this,kn,i),i},ii=async function(t,r){const s=await r.onInvokeHandoff(o(this,P),t.arguments);o(this,D).emit("agent_handoff",o(this,P),s),this.emit("agent_handoff",o(this,P),o(this,D),s),await L(this,K,sr).call(this,s),await o(this,$).updateSessionConfig(await L(this,K,ar).call(this));const a=Fs(s);return o(this,$).sendFunctionCallOutput(t,a,!0),s},ir=async function(t,r){o(this,P).context.history=JSON.parse(JSON.stringify(o(this,Y)));let s=t.arguments;if(r.parameters&&(ot(r.parameters)?s=r.parameters.parse(s):s=JSON.parse(s)),await r.needsApproval(o(this,P),s,t.callId)){const l=this.context.isToolApproved({toolName:r.name,callId:t.callId});if(l===!1){this.emit("agent_tool_start",o(this,P),o(this,D),r,{toolCall:t}),o(this,D).emit("agent_tool_start",o(this,P),r,{toolCall:t});const c="Tool execution was not approved.";o(this,$).sendFunctionCallOutput(t,c,!0),this.emit("agent_tool_end",o(this,P),o(this,D),r,c,{toolCall:t}),o(this,D).emit("agent_tool_end",o(this,P),r,c,{toolCall:t});return}else if(typeof l>"u"){this.emit("tool_approval_requested",o(this,P),o(this,D),{type:"function_approval",tool:r,approvalItem:new be(t,o(this,D))});return}}this.emit("agent_tool_start",o(this,P),o(this,D),r,{toolCall:t}),o(this,D).emit("agent_tool_start",o(this,P),r,{toolCall:t}),o(this,P).context.history=JSON.parse(JSON.stringify(o(this,Y)));const i=await r.invoke(o(this,P),t.arguments,{toolCall:t});let u;Ha(i)?(u=ze(i.content),o(this,$).sendFunctionCallOutput(t,u,!1)):(u=ze(i),o(this,$).sendFunctionCallOutput(t,u,!0)),this.emit("agent_tool_end",o(this,P),o(this,D),r,u,{toolCall:t}),o(this,D).emit("agent_tool_end",o(this,P),r,u,{toolCall:t})},oi=async function(t){const r=await o(this,D).getEnabledHandoffs(o(this,P)),s=new Map(r.map(l=>[l.toolName,l])),a=await o(this,D).getAllTools(o(this,P)),i=new Map(a.map(l=>[l.name,l])),u=s.get(t.name);if(u)await L(this,K,ii).call(this,t,u);else{const l=i.get(t.name);if(l&&l.type==="function")await L(this,K,ir).call(this,t,l);else throw new me(`Tool ${t.name} not found`)}},Xr=async function(t,r,s){if(o(this,qt).length===0)return;const a={agent:o(this,D),agentOutput:t,context:o(this,P)},u=(await Promise.all(o(this,qt).map(l=>l.run(a)))).find(l=>l.output.tripwireTriggered);if(u){if(o(this,Gt)[r])return;o(this,Gt)[r]=!0;const l=new Un(`Output guardrail triggered: ${JSON.stringify(u.output.outputInfo)}`,u);this.emit("guardrail_tripped",o(this,P),o(this,D),l,{itemId:s}),this.interrupt();const c=lc(u);this.sendMessage(c);return}},ui=function(){o(this,$).on("*",s=>{if(this.emit("transport_event",s),s.type==="conversation.item.input_audio_transcription.completed")try{const a=s;v(this,Y,ja(o(this,Y),a,o(this,Bt))),o(this,P).context.history=o(this,Y),this.emit("history_updated",o(this,Y))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,$).on("mcp_tools_listed",({serverLabel:s,tools:a})=>{try{o(this,Tn).set(s,a??[]),L(this,K,Qr).call(this)}catch(i){this.emit("error",{type:"error",error:i})}}),o(this,$).on("audio",s=>{o(this,Pe)||(v(this,Pe,!0),this.emit("audio_start",o(this,P),o(this,D))),this.emit("audio",s)}),o(this,$).on("turn_started",()=>{v(this,Pe,!1),this.emit("agent_start",o(this,P),o(this,D)),o(this,D).emit("agent_start",o(this,P),o(this,D))}),o(this,$).on("turn_done",s=>{const a=s.response.output[s.response.output.length-1],i=Pa(a)??"",u=(a==null?void 0:a.id)??"";this.emit("agent_end",o(this,P),o(this,D),i),o(this,D).emit("agent_end",o(this,P),i),L(this,K,Xr).call(this,i,s.response.id,u)}),o(this,$).on("audio_done",()=>{o(this,Pe)&&v(this,Pe,!1),this.emit("audio_stopped",o(this,P),o(this,D))});let t=0,r;o(this,$).on("audio_transcript_delta",s=>{try{const a=s.delta,i=s.itemId,u=s.responseId;r!==i&&(r=i,t=0);const c=(o(this,In)[i]??"")+a;if(o(this,In)[i]=c,o(this,Jt).debounceTextLength<0)return;const p=Math.floor(c.length/o(this,Jt).debounceTextLength);p>t&&(t=p,L(this,K,Xr).call(this,c,u,i))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,$).on("item_update",s=>{try{const a=!o(this,Y).some(i=>i.itemId===s.itemId);if(v(this,Y,ja(o(this,Y),s,o(this,Bt))),o(this,P).context.history=o(this,Y),a){const i=o(this,Y).find(u=>u.itemId===s.itemId);i&&this.emit("history_added",i)}this.emit("history_updated",o(this,Y))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,$).on("item_deleted",s=>{try{v(this,Y,o(this,Y).filter(a=>a.itemId!==s.itemId)),o(this,P).context.history=o(this,Y),this.emit("history_updated",o(this,Y))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,$).on("function_call",async s=>{try{await L(this,K,oi).call(this,s)}catch(a){Se.error("Error handling function call",a),this.emit("error",{type:"error",error:a})}}),o(this,$).on("usage_update",s=>{o(this,P).usage.add(s)}),o(this,$).on("audio_interrupted",()=>{o(this,Pe)&&v(this,Pe,!1),this.emit("audio_interrupted",o(this,P),o(this,D))}),o(this,$).on("error",s=>{this.emit("error",s)}),o(this,$).on("mcp_tool_call_completed",s=>{this.emit("mcp_tool_call_completed",o(this,P),o(this,D),s),o(this,An)&&o(this,$).sendEvent({type:"response.create"})}),o(this,$).on("mcp_approval_request",s=>{this.emit("tool_approval_requested",o(this,P),o(this,D),{type:"mcp_approval_request",approvalItem:oc(o(this,D),s)})})},Qr=function(){var l;const t=(l=o(this,Ut))==null?void 0:l.filter(c=>c.type==="mcp"),r=c=>{const p=c.allowed_tools;if(p){if(Array.isArray(p))return p;if(p&&Array.isArray(p.tool_names))return p.tool_names}},s=new Map;for(const c of t){const p=o(this,Tn).get(c.server_label)??[],f=r(c);for(const h of p)f&&!f.includes(h.name)||s.has(h.name)||s.set(h.name,h)}const a=Array.from(s.values()),i=o(this,St);(i.length!==a.length||JSON.stringify(i.map(c=>c.name).sort())!==JSON.stringify(a.map(c=>c.name).sort()))&&(v(this,St,a),this.emit("mcp_tools_changed",o(this,St)))};const xd={base64ToArrayBuffer:Na,arrayBufferToBase64:Da,getLastTextFromAudioOutputMessage:Pa};M.DEFAULT_OPENAI_REALTIME_MODEL=Ba,M.DEFAULT_OPENAI_REALTIME_SESSION_CONFIG=Ae,M.ModelBehaviorError=me,M.OpenAIRealtimeBase=sn,M.OpenAIRealtimeWebRTC=za,M.OpenAIRealtimeWebSocket=Va,M.OutputGuardrailTripwireTriggered=Un,M.RealtimeAgent=uc,M.RealtimeSession=bd,M.UserError=se,M.backgroundResult=_d,M.isBackgroundResult=Ha,M.tool=Bn,M.utils=xd,Object.defineProperty(M,Symbol.toStringTag,{value:"Module"})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
